<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net.Rest</name>
    </assembly>
    <members>
        <member name="P:Discord.API.MessageApplication.Id">
            <summary>
                Gets the snowflake ID of the application.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.CoverImage">
            <summary>
                Gets the ID of the embed's image asset.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Description">
            <summary>
                Gets the application's description.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Icon">
            <summary>
                Gets the ID of the application's icon.
            </summary>
        </member>
        <member name="P:Discord.API.MessageApplication.Name">
            <summary>
                Gets the name of the application.
            </summary>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.#ctor(Discord.Net.Rest.RestClientProvider,System.String,Discord.RetryMode,Newtonsoft.Json.JsonSerializer)">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.SetBaseUrl(System.String)">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetPrefixedToken(Discord.TokenType,System.String)">
            <exception cref="T:System.ArgumentException">Unknown OAuth token type.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyGuildChannelAsync(System.UInt64,Discord.API.Rest.ModifyGuildChannelParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channelId"/> must not be equal to zero.
            -and-
            <paramref name="args.Position.Position"/> must be greater than zero.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="args"/> must not be <see langword="null"/>.
            -and-
            <paramref name="args.Name.Name"/> must not be <see langword="null"/> or empty.
            </exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateMessageAsync(System.UInt64,Discord.API.Rest.CreateMessageParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateWebhookMessageAsync(System.UInt64,Discord.API.Rest.CreateWebhookMessageParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.UploadFileAsync(System.UInt64,Discord.API.Rest.UploadFileParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.UploadWebhookFileAsync(System.UInt64,Discord.API.Rest.UploadWebhookFileParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
            <exception cref="T:System.InvalidOperationException">This operation may only be called with a <see cref="F:Discord.TokenType.Webhook"/> token.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyMessageAsync(System.UInt64,System.UInt64,Discord.API.Rest.ModifyMessageParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateGuildBanAsync(System.UInt64,System.UInt64,Discord.API.Rest.CreateGuildBanParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="guildId"/> and <paramref name="userId"/> must not be equal to zero.
            -and-
            <paramref name="args.DeleteMessageDays.DeleteMessageDays"/> must be between 0 to 7.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.RemoveGuildBanAsync(System.UInt64,System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> and <paramref name="userId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetGuildEmbedAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.ModifyGuildEmbedAsync(System.UInt64,Discord.API.Rest.ModifyGuildEmbedParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetGuildIntegrationsAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> must not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateGuildIntegrationAsync(System.UInt64,Discord.API.Rest.CreateGuildIntegrationParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> and <paramref name="args.Id.Id"/> must not be equal to zero.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetInviteAsync(System.String,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="inviteId"/> cannot be blank.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inviteId"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetVanityInviteAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetGuildInvitesAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="guildId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.GetChannelInvitesAsync(System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException"><paramref name="channelId"/> may not be equal to zero.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CreateChannelInviteAsync(System.UInt64,Discord.API.Rest.CreateChannelInviteParams,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channelId"/> may not be equal to zero.
            -and-
            <paramref name="args.MaxAge.MaxAge"/> and <paramref name="args.MaxUses.MaxUses"/> must be greater than zero.
            -and-
            <paramref name="args.MaxAge.MaxAge"/> must be lesser than 86400.
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="args"/> must not be <see langword="null"/>.</exception>
        </member>
        <member name="M:Discord.API.DiscordRestApiClient.CheckState">
            <exception cref="T:System.InvalidOperationException">Client is not logged in.</exception>
        </member>
        <member name="M:Discord.Net.Rest.DefaultRestClient.SendAsync(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Boolean,System.String)">
            <exception cref="T:System.InvalidOperationException">Unsupported param type.</exception>
        </member>
        <member name="M:Discord.Net.Rest.DefaultRestClientProvider.Create(System.Boolean)">
            <exception cref="T:System.PlatformNotSupportedException">The default RestClientProvider is not supported on this platform.</exception>
        </member>
        <member name="M:Discord.Net.Converters.ImageConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <exception cref="T:System.InvalidOperationException">Cannot read from image.</exception>
        </member>
        <member name="M:Discord.Net.Converters.PermissionTargetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">Unknown permission target.</exception>
        </member>
        <member name="M:Discord.Net.Converters.PermissionTargetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <exception cref="T:Newtonsoft.Json.JsonSerializationException">Invalid permission target.</exception>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.LoginState">
            <summary>
                Gets the login state of the client.
            </summary>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.CurrentUser">
            <summary>
                Gets the logged-in user.
            </summary>
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.TokenType">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.#ctor(Discord.Rest.DiscordRestConfig,Discord.API.DiscordRestApiClient)">
            <summary> Creates a new REST-only Discord client. </summary>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.GetRecommendedShardCountAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#ConnectionState">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CurrentUser">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Creating a guild is not supported with the base client.</exception>
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.BaseDiscordClient.Discord#IDiscordClient#StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.ClientHelper.GetPrivateChannelsAsync(Discord.Rest.BaseDiscordClient,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="T:Discord.Rest.DiscordRestClient">
            <summary>
                Provides a client to send REST-based requests to Discord.
            </summary>
        </member>
        <member name="P:Discord.Rest.DiscordRestClient.CurrentUser">
            <summary>
                Gets the logged-in user.
            </summary>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.#ctor(Discord.Rest.DiscordRestConfig)">
            <summary>
                Initializes a new <see cref="T:Discord.Rest.DiscordRestClient"/> with the provided configuration.
            </summary>
            <param name="config">The configuration to be used with the client.</param>
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.OnLoginAsync(Discord.TokenType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.OnLogoutAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.DiscordRestClient.Discord#IDiscordClient#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.DiscordRestConfig">
            <summary>
                Represents a configuration class for <see cref="T:Discord.Rest.DiscordRestClient"/>.
            </summary>
        </member>
        <member name="P:Discord.Rest.DiscordRestConfig.RestClientProvider">
            <summary> Gets or sets the provider used to generate new REST connections. </summary>
        </member>
        <member name="T:Discord.Rest.BanAuditLogData">
            <summary>
                Contains a piece of audit log data related to a ban.
            </summary>
        </member>
        <member name="P:Discord.Rest.BanAuditLogData.Target">
            <summary>
                Gets the user that was banned.
            </summary>
            <returns>
                A user object representing the banned user.
            </returns>
        </member>
        <member name="T:Discord.Rest.ChannelCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the created channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the created channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelName">
            <summary>
                Gets the name of the created channel.
            </summary>
            <returns>
                A string containing the name of the created channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.ChannelType">
            <summary>
                Gets the type of the created channel.
            </summary>
            <returns>
                The type of channel that was created.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelCreateAuditLogData.Overwrites">
            <summary>
                Gets a collection of permission overwrites that was assigned to the created channel.
            </summary>
            <returns>
                A collection of permission <see cref="T:Discord.Overwrite"/>, containing the permission overwrites that were
                assigned to the created channel.
            </returns>
        </member>
        <member name="T:Discord.Rest.ChannelDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the deleted channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the deleted channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelName">
            <summary>
                Gets the name of the deleted channel.
            </summary>
            <returns>
                A string containing the name of the deleted channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.ChannelType">
            <summary>
                Gets the type of the deleted channel.
            </summary>
            <returns>
                The type of channel that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelDeleteAuditLogData.Overwrites">
            <summary>
                Gets a collection of permission overwrites that was assigned to the deleted channel.
            </summary>
            <returns>
                A collection of permission <see cref="T:Discord.Overwrite"/>.
            </returns>
        </member>
        <member name="T:Discord.Rest.ChannelInfo">
            <summary>
                Represents information for a channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Name">
            <summary>
                Gets the name of this channel.
            </summary>
            <returns>
                A string containing the name of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Topic">
            <summary>
                Gets the topic of this channel.
            </summary>
            <returns>
                A string containing the topic of this channel, if any.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.Bitrate">
            <summary>
                Gets the bit-rate of this channel if applicable.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the bit-rate set for the voice channel; <c>null</c> if not
                applicable.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelInfo.UserLimit">
            <summary>
                Gets the number of users allowed to be in this channel if applicable.
            </summary>
            <returns>
                An <see cref="T:System.Int32" /> representing the number of users allowed to be in this voice channel; 
                <c>null</c> if not applicable.
            </returns>
        </member>
        <member name="T:Discord.Rest.ChannelUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a channel update.
            </summary>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.ChannelId">
            <summary>
                Gets the snowflake ID of the updated channel.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the updated channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.Before">
            <summary>
                Gets the channel information before the changes.
            </summary>
            <returns>
                An information object containing the original channel information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.ChannelUpdateAuditLogData.After">
            <summary>
                Gets the channel information after the changes.
            </summary>
            <returns>
                An information object containing the channel information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.EmoteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteCreateAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the created emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the created emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteCreateAuditLogData.Name">
            <summary>
                Gets the name of the created emoji.
            </summary>
            <returns>
                A string containing the name of the created emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.EmoteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteDeleteAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the deleted emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the deleted emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteDeleteAuditLogData.Name">
            <summary>
                Gets the name of the deleted emoji.
            </summary>
            <returns>
                A string containing the name of the deleted emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.EmoteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an emoji update.
            </summary>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.EmoteId">
            <summary>
                Gets the snowflake ID of the updated emoji.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the updated emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.NewName">
            <summary>
                Gets the new name of the updated emoji.
            </summary>
            <returns>
                A string containing the new name of the updated emoji.
            </returns>
        </member>
        <member name="P:Discord.Rest.EmoteUpdateAuditLogData.OldName">
            <summary>
                Gets the old name of the updated emoji.
            </summary>
            <returns>
                A string containing the old name of the updated emoji.
            </returns>
        </member>
        <member name="T:Discord.Rest.GuildInfo">
            <summary>
                Represents information for a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildInfo.AfkTimeout">
            <summary>
                Gets the amount of time (in seconds) a user must be inactive in a voice channel for until they are
                automatically moved to the AFK voice channel.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the amount of time in seconds for a user to be marked as inactive
                and moved into the AFK voice channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.DefaultMessageNotifications">
            <summary>
                Gets the default message notifications for users who haven't explicitly set their notification settings.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildInfo.AfkChannelId">
            <summary>
                Gets the ID of the AFK voice channel for this guild.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the AFK voice channel; <c>null</c> if
                none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.Name">
            <summary>
                Gets the name of this guild.
            </summary>
            <returns>
                A string containing the name of this guild.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.RegionId">
            <summary>
                Gets the ID of the region hosting this guild's voice channels.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildInfo.IconHash">
            <summary>
                Gets the ID of this guild's icon.
            </summary>
            <returns>
                A string containing the identifier for the splash image; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.VerificationLevel">
            <summary>
                Gets the level of requirements a user must fulfill before being allowed to post messages in this guild.
            </summary>
            <returns>
                The level of requirements.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.Owner">
            <summary>
                Gets the owner of this guild.
            </summary>
            <returns>
                A user object representing the owner of this guild.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildInfo.MfaLevel">
            <summary>
                Gets the level of Multi-Factor Authentication requirements a user must fulfill before being allowed to
                perform administrative actions in this guild.
            </summary>
            <returns>
                The level of MFA requirement.
            </returns>
        </member>
        <member name="T:Discord.Rest.GuildUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a guild update.
            </summary>
        </member>
        <member name="P:Discord.Rest.GuildUpdateAuditLogData.Before">
            <summary>
                Gets the guild information before the changes.
            </summary>
            <returns>
                An information object containing the original guild information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.GuildUpdateAuditLogData.After">
            <summary>
                Gets the guild information after the changes.
            </summary>
            <returns>
                An information object containing the guild information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to an invite creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Temporary">
            <summary>
                Gets a value that determines whether the invite is a temporary one.
            </summary>
            <returns>
                <c>true</c> if users accepting this invite will be removed from the guild when they log off; otherwise
                <c>false</c>.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Creator">
            <summary>
                Gets the user that created this invite.
            </summary>
            <returns>
                A user that created this invite.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of times this invite was used.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteCreateAuditLogData.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to an invite removal.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Temporary">
            <summary>
                Gets a value that indicates whether the invite is a temporary one.
            </summary>
            <returns>
                <c>true</c> if users accepting this invite will be removed from the guild when they log off; otherwise
                <c>false</c>.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Creator">
            <summary>
                Gets the user that created this invite.
            </summary>
            <returns>
                A user that created this invite.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.Uses">
            <summary>
                Gets the number of times this invite has been used.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of times this invite has been used.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteDeleteAuditLogData.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteInfo">
            <summary>
                Represents information for an invite.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteInfo.MaxAge">
            <summary>
                Gets the time (in seconds) until the invite expires.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the time in seconds until this invite expires; <c>null</c> if this
                invite never expires or not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.Code">
            <summary>
                Gets the unique identifier for this invite.
            </summary>
            <returns>
                A string containing the invite code (e.g. <c>FTqNnyS</c>).
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.Temporary">
            <summary>
                Gets a value that indicates whether the invite is a temporary one.
            </summary>
            <returns>
                <c>true</c> if users accepting this invite will be removed from the guild when they log off, 
                <c>false</c> if not; <c>null</c> if not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.ChannelId">
            <summary>
                Gets the ID of the channel this invite is linked to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the channel snowflake identifier that the invite points to; 
                <c>null</c> if not specified.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteInfo.MaxUses">
            <summary>
                Gets the max number of uses this invite may have.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of uses this invite may be accepted until it is removed
                from the guild; <c>null</c> if none is specified.
            </returns>
        </member>
        <member name="T:Discord.Rest.InviteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data relating to an invite update.
            </summary>
        </member>
        <member name="P:Discord.Rest.InviteUpdateAuditLogData.Before">
            <summary>
                Gets the invite information before the changes.
            </summary>
            <returns>
                An information object containing the original invite information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.InviteUpdateAuditLogData.After">
            <summary>
                Gets the invite information after the changes.
            </summary>
            <returns>
                An information object containing the invite information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.KickAuditLogData">
            <summary>
                Contains a piece of audit log data related to a kick.
            </summary>
        </member>
        <member name="P:Discord.Rest.KickAuditLogData.Target">
            <summary>
                Gets the user that was kicked.
            </summary>
            <returns>
                A user object representing the kicked user.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberRoleAuditLogData">
            <summary>
                Contains a piece of audit log data related to a change in a guild member's roles.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberRoleAuditLogData.Roles">
            <summary>
                Gets a collection of role changes that were performed on the member.
            </summary>
            <returns>
                A read-only collection of <see cref="T:Discord.Rest.MemberRoleEditInfo"/>, containing the roles that were changed on
                the member.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleAuditLogData.Target">
            <summary>
                Gets the user that the roles changes were performed on.
            </summary>
            <returns>
                A user object representing the user that the role changes were performed on.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberRoleEditInfo">
            <summary>
                An information object representing a change in one of a guild member's roles.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.Name">
            <summary>
                Gets the name of the role that was changed.
            </summary>
            <returns>
                A string containing the name of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.RoleId">
            <summary>
                Gets the ID of the role that was changed.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.MemberRoleEditInfo.Added">
            <summary>
                Gets a value that indicates whether the role was added to the user.
            </summary>
            <returns>
                <c>true</c> if the role was added to the user; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Discord.Rest.MemberUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a change in a guild member.
            </summary>
        </member>
        <member name="P:Discord.Rest.MemberUpdateAuditLogData.Target">
            <summary>
                Gets the user that the changes were performed on.
            </summary>
            <returns>
                A user object representing the user who the changes were performed on.
            </returns>
        </member>
        <member name="T:Discord.Rest.MessageDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to message deletion(s).
            </summary>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.MessageCount">
            <summary>
                Gets the number of messages that were deleted.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of messages that were deleted from the channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the messages were deleted from.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the channel that the messages were
                deleted from.
            </returns>
        </member>
        <member name="P:Discord.Rest.MessageDeleteAuditLogData.AuthorId">
            <summary>
                Gets the author of the messages that were deleted.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier for the user that created the deleted messages.
            </returns>
        </member>
        <member name="T:Discord.Rest.OverwriteCreateAuditLogData">
            <summary>
                Contains a piece of audit log data for a permissions overwrite creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteCreateAuditLogData.Overwrite">
            <summary>
                Gets the permission overwrite object that was created.
            </summary>
            <returns>
                An <see cref="P:Discord.Rest.OverwriteCreateAuditLogData.Overwrite"/> object representing the overwrite that was created.
            </returns>
        </member>
        <member name="T:Discord.Rest.OverwriteDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to the deletion of a permission overwrite.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteDeleteAuditLogData.Overwrite">
            <summary>
                Gets the permission overwrite object that was deleted.
            </summary>
            <returns>
                An <see cref="P:Discord.Rest.OverwriteDeleteAuditLogData.Overwrite"/> object representing the overwrite that was deleted.
            </returns>
        </member>
        <member name="T:Discord.Rest.OverwriteUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to the update of a permission overwrite.
            </summary>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OldPermissions">
            <summary>
                Gets the overwrite permissions before the changes.
            </summary>
            <returns>
                An overwrite permissions object representing the overwrite permissions that the overwrite had before
                the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.NewPermissions">
            <summary>
                Gets the overwrite permissions after the changes.
            </summary>
            <returns>
                An overwrite permissions object representing the overwrite permissions that the overwrite had after the
                changes.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OverwriteTargetId">
            <summary>
                Gets the ID of the overwrite that was updated.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the overwrite that was updated.
            </returns>
        </member>
        <member name="P:Discord.Rest.OverwriteUpdateAuditLogData.OverwriteType">
            <summary>
                Gets the target of the updated permission overwrite.
            </summary>
            <returns>
                The target of the updated permission overwrite.
            </returns>
        </member>
        <member name="T:Discord.Rest.PruneAuditLogData">
            <summary>
                Contains a piece of audit log data related to a guild prune.
            </summary>
        </member>
        <member name="P:Discord.Rest.PruneAuditLogData.PruneDays">
            <summary>
                Gets the threshold for a guild member to not be kicked.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the amount of days that a member must have been seen in the server,
                to avoid being kicked. (i.e. If a user has not been seen for more than <paramref cref="P:Discord.Rest.PruneAuditLogData.PruneDays"/>, they will be
                kicked from the server)
            </returns>
        </member>
        <member name="P:Discord.Rest.PruneAuditLogData.MembersRemoved">
            <summary>
                Gets the number of members that were kicked during the purge.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> representing the number of members that were removed from this guild for having
                not been seen within <paramref cref="P:Discord.Rest.PruneAuditLogData.PruneDays"/>.
            </returns>
        </member>
        <member name="T:Discord.Rest.RoleCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a role creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleCreateAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was created.
            </summary>
            <return>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier to the role that was created.
            </return>
        </member>
        <member name="P:Discord.Rest.RoleCreateAuditLogData.Properties">
            <summary>
                Gets the role information that was created.
            </summary>
            <return>
                An information object representing the properties of the role that was created.
            </return>
        </member>
        <member name="T:Discord.Rest.RoleDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data relating to a role deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleDeleteAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was deleted.
            </summary>
            <return>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier to the role that was deleted.
            </return>
        </member>
        <member name="P:Discord.Rest.RoleDeleteAuditLogData.Properties">
            <summary>
                Gets the role information that was deleted.
            </summary>
            <return>
                An information object representing the properties of the role that was deleted.
            </return>
        </member>
        <member name="T:Discord.Rest.RoleEditInfo">
            <summary>
                Represents information for a role edit.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Color">
            <summary>
                Gets the color of this role.
            </summary>
            <returns>
                A color object representing the color assigned to this role; <c>null</c> if this role does not have a
                color.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Mentionable">
            <summary>
                Gets a value that indicates whether this role is mentionable.
            </summary>
            <returns>
                <c>true</c> if other members can mention this role in a text channel; otherwise <c>false</c>; 
                <c>null</c> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Hoist">
            <summary>
                Gets a value that indicates whether this role is hoisted (i.e. its members will appear in a separate
                section on the user list).
            </summary>
            <returns>
                <c>true</c> if this role's members will appear in a separate section in the user list; otherwise 
                <c>false</c>; <c>null</c> if this is not mentioned in this entry.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Name">
            <summary>
                Gets the name of this role.
            </summary>
            <returns>
               A string containing the name of this role.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleEditInfo.Permissions">
            <summary>
                Gets the permissions assigned to this role.
            </summary>
            <returns>
                A guild permissions object representing the permissions that have been assigned to this role; <c>null</c>
                if no permissions have been assigned.
            </returns>
        </member>
        <member name="T:Discord.Rest.RoleUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a role update.
            </summary>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.RoleId">
            <summary>
                Gets the ID of the role that was changed.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the role that was changed.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.Before">
            <summary>
                Gets the role information before the changes.
            </summary>
            <returns>
                A role information object containing the role information before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.RoleUpdateAuditLogData.After">
            <summary>
                Gets the role information after the changes.
            </summary>
            <returns>
                A role information object containing the role information after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.UnbanAuditLogData">
            <summary>
                Contains a piece of audit log data related to an unban.
            </summary>
        </member>
        <member name="P:Discord.Rest.UnbanAuditLogData.Target">
            <summary>
                Gets the user that was unbanned.
            </summary>
            <returns>
                A user object representing the user that was unbanned.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookCreateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook creation.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Webhook">
            <summary>
                Gets the webhook that was created if it still exists.
            </summary>
            <returns>
                A webhook object representing the webhook that was created if it still exists, otherwise returns <c>null</c>.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.WebhookId">
            <summary>
                Gets the webhook id.
            </summary>
            <returns>
                The webhook identifier.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Type">
            <summary>
                Gets the type of webhook that was created.
            </summary>
            <returns>
                The type of webhook that was created.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.Name">
            <summary>
                Gets the name of the webhook.
            </summary>
            <returns>
                A string containing the name of the webhook.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookCreateAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the webhook could send to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that the webhook could send
                to.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookDeleteAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook deletion.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.WebhookId">
            <summary>
                Gets the ID of the webhook that was deleted.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.ChannelId">
            <summary>
                Gets the ID of the channel that the webhook could send to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that the webhook could send
                to.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Type">
            <summary>
                Gets the type of the webhook that was deleted.
            </summary>
            <returns>
                The type of webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Name">
            <summary>
                Gets the name of the webhook that was deleted.
            </summary>
            <returns>
                A string containing the name of the webhook that was deleted.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookDeleteAuditLogData.Avatar">
            <summary>
                Gets the hash value of the webhook's avatar.
            </summary>
            <returns>
                A string containing the hash of the webhook's avatar.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookInfo">
            <summary>
                Represents information for a webhook.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.Name">
            <summary>
                Gets the name of this webhook.
            </summary>
            <returns>
                A string containing the name of this webhook.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.ChannelId">
            <summary>
                Gets the ID of the channel that this webhook sends to.
            </summary>
            <returns>
                A <see cref="T:System.UInt64"/> representing the snowflake identifier of the channel that this webhook can send
                to.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookInfo.Avatar">
            <summary>
                Gets the hash value of this webhook's avatar.
            </summary>
            <returns>
                A string containing the hash of this webhook's avatar.
            </returns>
        </member>
        <member name="T:Discord.Rest.WebhookUpdateAuditLogData">
            <summary>
                Contains a piece of audit log data related to a webhook update.
            </summary>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.Webhook">
            <summary>
                Gets the webhook that was updated.
            </summary>
            <returns>
                A webhook object representing the webhook that was updated.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.Before">
            <summary>
                Gets the webhook information before the changes.
            </summary>
            <returns>
                A webhook information object representing the webhook before the changes were made.
            </returns>
        </member>
        <member name="P:Discord.Rest.WebhookUpdateAuditLogData.After">
            <summary>
                Gets the webhook information after the changes.
            </summary>
            <returns>
                A webhook information object representing the webhook after the changes were made.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestAuditLogEntry">
            <summary>
                Represents a REST-based audit log entry.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.CreatedAt">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Action">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Data">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.User">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Rest.RestAuditLogEntry.Reason">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.CreateInviteAsync(Discord.IGuildChannel,Discord.Rest.BaseDiscordClient,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentException">
            <paramref name="channel.Id.Id"/> may not be equal to zero.
            -and-
            <paramref name="maxAge"/> and <paramref name="maxUses"/> must be greater than zero.
            -and-
            <paramref name="maxAge"/> must be lesser than 86400.
            </exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendMessageAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFileAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SendFileAsync(Discord.IMessageChannel,Discord.Rest.BaseDiscordClient,System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.GetUserAsync(Discord.IGuildChannel,Discord.IGuild,Discord.Rest.BaseDiscordClient,System.UInt64,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.GetUsersAsync(Discord.IGuildChannel,Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Nullable{System.UInt64},System.Nullable{System.Int32},Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="M:Discord.Rest.ChannelHelper.SyncPermissionsAsync(Discord.INestedChannel,Discord.Rest.BaseDiscordClient,Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">This channel does not have a parent channel.</exception>
        </member>
        <member name="T:Discord.Rest.IRestMessageChannel">
            <summary>
                Represents a REST-based channel that can send and receive messages.
            </summary>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <summary>
                Sends a message to this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Determines whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich"/> <see cref="T:Discord.Embed"/> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <summary>
                Sends a file to this message channel with an optional caption.
            </summary>
            <remarks>
                This method follows the same behavior as described in 
                <see cref="!:IMessageChannel.SendFileAsync(string, string, bool, Embed, RequestOptions)"/>. Please visit
                its documentation for more details on this method.
            </remarks>
            <param name="filePath">The file path of the file.</param>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich" /> <see cref="T:Discord.Embed" /> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <summary>
                Sends a file to this message channel with an optional caption.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="stream">The <see cref="T:System.IO.Stream" /> of the file to be sent.</param>
            <param name="filename">The name of the attachment.</param>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich"/> <see cref="T:Discord.Embed"/> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="id">The snowflake identifier of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <c>null</c> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.Rest.IRestMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of pinned messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation for retrieving pinned messages in this channel.
                The task result contains a collection of messages found in the pinned messages.
            </returns>
        </member>
        <member name="T:Discord.Rest.IRestPrivateChannel">
            <summary>
                Represents a REST-based channel that is private to select recipients.
            </summary>
        </member>
        <member name="P:Discord.Rest.IRestPrivateChannel.Recipients">
            <summary>
                Users that can access this channel.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestCategoryChannel">
            <summary>
                Represents a REST-based category channel.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestCategoryChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This method is not supported with category channels.</exception>
        </member>
        <member name="M:Discord.Rest.RestCategoryChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This method is not supported with category channels.</exception>
        </member>
        <member name="T:Discord.Rest.RestChannel">
            <summary>
                Represents a generic REST-based channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestChannel.CreatedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Create(Discord.Rest.BaseDiscordClient,Discord.API.Channel)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="M:Discord.Rest.RestChannel.CreatePrivate(Discord.Rest.BaseDiscordClient,Discord.API.Channel)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type.</exception>
        </member>
        <member name="M:Discord.Rest.RestChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestDMChannel">
            <summary>
                Represents a REST-based direct-message channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Recipient">
            <summary>
                Gets the recipient of the channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Users">
            <summary>
                Gets a collection that is the current logged-in user and the recipient.
            </summary>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.CloseAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetUser(System.UInt64)">
            <summary>
                Gets a user in this channel from the provided <paramref name="id"/>.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A <see cref="T:Discord.Rest.RestUser"/> object that is a recipient of this channel; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.ToString">
            <summary>
                Gets a string that represents the Username#Discriminator of the recipient.
            </summary>
            <returns>
                A string that resolves to the Recipient of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IDMChannel#Recipient">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#Rest#IRestPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestDMChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGroupChannel">
            <summary>
                Represents a REST-based group-message channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGroupChannel.Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGroupChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Connecting to a group channel is not supported.</exception>
        </member>
        <member name="T:Discord.Rest.RestGuildChannel">
            <summary>
                Represents a private REST-based group channel.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.PermissionOverwrites">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.GuildId">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IUser)">
            <summary>
                Gets the permission overwrite for a specific user.
            </summary>
            <param name="user">The user to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted user; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.GetPermissionOverwrite(Discord.IRole)">
            <summary>
                Gets the permission overwrite for a specific role.
            </summary>
            <param name="role">The role to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted role; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the role.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.ToString">
            <summary>
                Gets the name of this channel.
            </summary>
            <returns>
                A string that is the name of this channel.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#Guild">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestNewsChannel">
            <summary>
                Represents a REST-based news channel in a guild that has the same properties as a <see cref="T:Discord.Rest.RestTextChannel"/>.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestTextChannel">
            <summary>
                Represents a REST-based channel in a guild that can send and receive messages.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestTextChannel.Topic">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.SlowModeInterval">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestTextChannel.IsNsfw">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Update(Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetUserAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a user in this channel.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.InvalidOperationException">
            Resolving permissions requires the parent guild to be downloaded.
            </exception>
            <returns>
                A task representing the asynchronous get operation. The task result contains a guild user object that
                represents the user; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of users that are able to view the channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.InvalidOperationException">
            Resolving permissions requires the parent guild to be downloaded.
            </exception>
            <returns>
                A paged collection containing a collection of guild users that can access this channel. Flattening the
                paginated response into a collection of users with 
                <see cref="M:Discord.AsyncEnumerableExtensions.FlattenAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Collections.Generic.IEnumerable{``0}})"/> is required if you wish to access the users.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentException">
            <paramref name="filePath" /> is a zero-length string, contains only white space, or contains one or more
            invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="filePath" /> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on
            Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260
            characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid, (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="filePath" /> specified a directory.-or- The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            The file specified in <paramref name="filePath" /> was not found.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath" /> is in an invalid format.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <summary>
                Creates a webhook in this text channel.
            </summary>
            <param name="name">The name of the webhook.</param>
            <param name="avatar">The avatar of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                webhook.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook available in this text channel.
            </summary>
            <param name="id">The identifier of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a webhook associated
                with the identifier; <c>null</c> if the webhook is not found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets the webhooks available in this text channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks that is available in this channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetCategoryAsync(Discord.RequestOptions)">
            <summary>
                Gets the parent (category) channel of this channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the category channel
                representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestTextChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestVoiceChannel">
            <summary>
                Represents a REST-based voice channel in a guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.Bitrate">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.UserLimit">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Update(Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.GetCategoryAsync(Discord.RequestOptions)">
            <summary>
                Gets the parent (category) channel of this channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the category channel
                representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Connecting to a REST-based channel is not supported.</exception>
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Action{Discord.GuildProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyEmbedAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateTextChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.TextChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateVoiceChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.VoiceChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateCategoryChannelAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,Discord.RequestOptions,System.Action{Discord.GuildChannelProperties})">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.CreateRoleAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.GuildHelper.ModifyEmoteAsync(Discord.IGuild,Discord.Rest.BaseDiscordClient,System.UInt64,System.Action{Discord.EmoteProperties},Discord.RequestOptions)">
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Discord.Rest.RestBan">
            <summary>
                Represents a REST-based ban object.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestBan.User">
            <summary>
                Gets the banned user.
            </summary>
            <returns>
                A generic <see cref="T:Discord.Rest.RestUser"/> object that was banned.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestBan.Reason">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestBan.ToString">
            <summary>
                Gets the name of the banned user.
            </summary>
            <returns>
                A string containing the name of the user that was banned.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestBan.Discord#IBan#User">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuild">
            <summary>
                Represents a REST-based guild/server.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.AFKTimeout">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IsEmbeddable">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.VerificationLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.MfaLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.DefaultMessageNotifications">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ExplicitContentFilter">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.AFKChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.EmbedChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SystemChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.OwnerId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.VoiceRegionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IconId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SplashId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.ApplicationId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.SplashUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.EveryoneRole">
            <summary>
                Gets the built-in role containing all users in this guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Roles">
            <summary>
                Gets a collection of all roles in this guild.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuild.Emotes">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Features">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="args" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBansAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all users banned in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                ban objects that this guild currently possesses, with each object containing the user banned and reason
                behind the ban.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="user">The banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="userId">The snowflake identifier for the banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                generic channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the generic channel
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetTextChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a text channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the text channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the text channel
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetTextChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all text channels in this guild.
            </summary>
            <param name="mode">The <see cref="T:Discord.CacheMode"/> that determines whether the object should be fetched from cache.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                message channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceChannelAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a voice channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the voice channel.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the voice channel associated
                with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all voice channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetCategoryChannelsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all category channels in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                category channels found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAFKChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the AFK voice channel in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the voice channel that the
                AFK users will be moved to after they have idled for too long; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetDefaultChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the first viewable text channel in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the first viewable text
                channel in this guild; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEmbedChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the embed channel (i.e. the channel set in the guild's widget settings) in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the embed channel set
                within the server's widget settings; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetSystemChannelAsync(Discord.RequestOptions)">
            <summary>
                Gets the first viewable text channel in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the first viewable text
                channel in this guild; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new text channel in this guild.
            </summary>
            <example>
                The following example creates a new text channel under an existing category named <c>Wumpus</c> with a set topic.
                <code language="cs">
                var categories = await guild.GetCategoriesAsync();
                var targetCategory = categories.FirstOrDefault(x => x.Name == "wumpus");
                if (targetCategory == null) return;
                await Context.Guild.CreateTextChannelAsync(name, x =>
                {
                    x.CategoryId = targetCategory.Id;
                    x.Topic = $"This channel was created at {DateTimeOffset.UtcNow} by {user}.";
                });
                </code>
            </example>
            <param name="name">The new name for the text channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                text channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a voice channel with the provided name.
            </summary>
            <param name="name">The name of the new channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <c>null</c>.</exception>
            <returns>
                The created voice channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a category channel with the provided name.
            </summary>
            <param name="name">The name of the new channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name" /> is <c>null</c>.</exception>
            <returns>
                The created category channel.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVoiceRegionsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all the voice regions this guild can access.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice regions the guild can access.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetInvitesAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all invites in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                invite metadata, each representing information for an invite found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetVanityInviteAsync(Discord.RequestOptions)">
            <summary>
                Gets the vanity invite URL of this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A partial metadata of the vanity invite found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetRole(System.UInt64)">
            <summary>
                Gets a role in this guild.
            </summary>
            <param name="id">The snowflake identifier for the role.</param>
            <returns>
                A role that is associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <summary>
                Creates a new role with the provided name.
            </summary>
            <param name="name">The new name for the role.</param>
            <param name="permissions">The guild permission that the role should possess.</param>
            <param name="color">The color of the role.</param>
            <param name="isHoisted">Whether the role is separated from others on the sidebar.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                role.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetUsersAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all users in this guild.
            </summary>
            <remarks>
                This method retrieves all users found within this guild.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a collection of guild
                users found within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.GetUserAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a user from this guild.
            </summary>
            <remarks>
                This method retrieves a user found within this guild.
            </remarks>
            <param name="id">The snowflake identifier of the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the guild user
                associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetCurrentUserAsync(Discord.RequestOptions)">
            <summary>
                Gets the current user for this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the currently logged-in
                user within this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetOwnerAsync(Discord.RequestOptions)">
            <summary>
                Gets the owner of this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the owner of this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
            <summary>
                Prunes inactive users.
            </summary>
            <remarks>
                <para>
                    This method removes all users that have not logged on in the provided number of <paramref name="days"/>.
                </para>
                <para>
                    If <paramref name="simulate" /> is <c>true</c>, this method will only return the number of users that
                    would be removed without kicking the users.
                </para>
            </remarks>
            <param name="days">The number of days required for the users to be kicked.</param>
            <param name="simulate">Whether this prune action is a simulation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous prune operation. The task result contains the number of users to
                be or has been removed from this guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the specified number of audit log entries for this guild.
            </summary>
            <param name="limit">The number of audit log entries to fetch.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of the requested audit log entries.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook found within this guild.
            </summary>
            <param name="id">The identifier for the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the webhook with the
                specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all webhook from this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks found within the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.ToString">
            <summary>
                Returns the name of the guild.
            </summary>
            <returns>
                The name of the guild.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#Available">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#AudioClient">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#EveryoneRole">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuild.Discord#IGuild#Roles">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBansAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetRole(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#DownloadUsersAsync">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Downloading users is not supported for a REST-based guild.</exception>
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.IsEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.IsSyncing">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.ExpireBehavior">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.ExpireGracePeriod">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.RoleId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.Account">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.SyncedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.Discord#IGuildIntegration#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildIntegration.Discord#IGuildIntegration#User">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.IsOwner">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserGuild.IconUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserGuild.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestVoiceRegion">
            <summary>
                Represents a REST-based voice region.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsVip">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsOptimal">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestVoiceRegion.IsCustom">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.ChannelName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.GuildName">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.PresenceCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.MemberCount">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.ChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Code">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Url">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestInvite.ToString">
            <summary>
                Gets the URL of the invite.
            </summary>
            <returns>
                A string that resolves to the Url of the invite.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestInvite.Discord#IInvite#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInvite.Discord#IInvite#Channel">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestInviteMetadata">
            <summary> Represents additional information regarding the REST-based invite object. </summary>
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.IsRevoked">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.IsTemporary">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.MaxAge">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.MaxUses">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.Uses">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.Inviter">
            <summary>
                Gets the user that created this invite.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestInviteMetadata.Discord#IInviteMetadata#Inviter">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.MessageHelper.ModifyAsync(Discord.IMessage,Discord.Rest.BaseDiscordClient,System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <exception cref="T:System.InvalidOperationException">Only the author of a message may modify the message.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="T:Discord.Rest.RestMessage">
            <summary>
                Represents a REST-based message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Channel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Author">
            <summary>
                Gets the Author of the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Source">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Content">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Attachments">
            <summary>
                Gets a collection of the <see cref="T:Discord.Attachment"/>'s on the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Embeds">
            <summary>
                Gets a collection of the <see cref="T:Discord.Embed"/>'s on the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.MentionedUsers">
            <summary>
                Gets a collection of the mentioned users in the message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Timestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Application">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestMessage.ToString">
            <summary>
                Gets the <see cref="P:Discord.Rest.RestMessage.Content"/> of the message.
            </summary>
            <returns>
                A string that is the <see cref="P:Discord.Rest.RestMessage.Content"/> of the message.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestMessage.Discord#IMessage#MentionedUserIds">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestReaction">
            <summary>
                Represents a REST reaction object.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.Emote">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestReaction.Count">
            <summary>
                Gets the number of reactions added.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestReaction.Me">
            <summary>
                Gets whether the reactions is added by the user.
            </summary>
        </member>
        <member name="T:Discord.Rest.RestSystemMessage">
            <summary>
                Represents a REST-based system message.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSystemMessage.Type">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestUserMessage">
            <summary>
                Represents a REST-based message sent by a user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUserMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.MentionedUsers">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUserMessage.Reactions">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.PinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.UnpinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestApplication">
            <summary>
                Represents a REST-based entity that contains information about a Discord application created via the developer portal.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestApplication.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Description">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.RPCOrigins">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Flags">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.Owner">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestApplication.IconUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestApplication.UpdateAsync">
            <exception cref="T:System.InvalidOperationException">Unable to update this object from a different application token.</exception>
        </member>
        <member name="M:Discord.Rest.RestApplication.ToString">
            <summary>
                Gets the name of the application.
            </summary>
            <returns>
                Name of the application.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestRole">
            <summary>
                Represents a REST-based role.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestRole.Color">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsHoisted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsManaged">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsMentionable">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestRole.IsEveryone">
            <summary>
                Gets if this role is the @everyone role of the guild or not.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestRole.Mention">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.CompareTo(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestRole.ToString">
            <summary>
                Gets the name of the role.
            </summary>
            <returns>
                A string that is the name of the role.
            </returns>
        </member>
        <member name="P:Discord.Rest.RestRole.Discord#IRole#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Id">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.IsRevoked">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestConnection.IntegrationIds">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestConnection.ToString">
            <summary>
                Gets the name of the connection.
            </summary>
            <returns>
                Name of the connection.
            </returns>
        </member>
        <member name="T:Discord.Rest.RestGroupUser">
            <summary>
                Represents a REST-based group user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGroupUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestGuildUser">
            <summary>
                Represents a REST-based guild user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.GuildPermissions">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException" accessor="get">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.JoinedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestGuildUser.GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Resolving permissions requires the parent guild to be downloaded.</exception>
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestGuildUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="T:Discord.Rest.RestSelfUser">
            <summary>
                Represents the logged-in REST-based user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestSelfUser.Email">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.IsVerified">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestSelfUser.IsMfaEnabled">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestSelfUser.Update(Discord.API.User)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestSelfUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Unable to update this object using a different token.</exception>
        </member>
        <member name="M:Discord.Rest.RestSelfUser.ModifyAsync(System.Action{Discord.SelfUserProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Unable to modify this object using a different token.</exception>
        </member>
        <member name="T:Discord.Rest.RestUser">
            <summary>
                Represents a REST-based user.
            </summary>
        </member>
        <member name="P:Discord.Rest.RestUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Discriminator">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)">
            <summary>
                Returns a direct message channel to this user, or create one if it does not already exist.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a rest DM channel where the user is the recipient.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.GetDefaultAvatarUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestUser.ToString">
            <summary>
                Gets the Username#Discriminator of the user.
            </summary>
            <returns>
                A string that resolves to Username#Discriminator of the user.
            </returns>
        </member>
        <member name="M:Discord.Rest.RestUser.Discord#IUser#GetOrCreateDMChannelAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.WebhookId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#JoinedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GuildPermissions">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhookUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.ChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Token">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Creator">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.CreatedAt">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.UpdateAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.GetAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Discord#IWebhook#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.Rest.RestWebhook.Discord#IWebhook#Channel">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.RestWebhook.Discord#IWebhook#ModifyAsync(System.Action{Discord.WebhookProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.Rest.ClientExtensions.AddGuildUserAsync(Discord.Rest.BaseDiscordClient,System.UInt64,System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <summary>
                Adds a user to the specified guild.
            </summary>
            <remarks>
                This method requires you have an OAuth2 access token for the user, requested with the guilds.join scope, and that the bot have the MANAGE_INVITES permission in the guild.
            </remarks>
            <param name="client">The Discord client object.</param>
            <param name="guildId">The snowflake identifier of the guild.</param>
            <param name="userId">The snowflake identifier of the user.</param>
            <param name="accessToken">The OAuth2 access token for the user, requested with the guilds.join scope.</param>
            <param name="func">The delegate containing the properties to be applied to the user upon being added to the guild.</param>
            <param name="options">The options to be used when sending the request.</param>
        </member>
        <member name="T:Discord.Attachment">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Attachment.Id">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Filename">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Url">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.ProxyUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Size">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Height">
            <inheritdoc />
        </member>
        <member name="P:Discord.Attachment.Width">
            <inheritdoc />
        </member>
        <member name="M:Discord.Attachment.ToString">
            <summary>
                Returns the filename of this attachment.
            </summary>
            <returns>
                A string containing the filename of this attachment.
            </returns>
        </member>
    </members>
</doc>
