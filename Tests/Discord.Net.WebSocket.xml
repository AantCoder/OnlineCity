<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Discord.Net.WebSocket</name>
    </assembly>
    <members>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Dispatch">
            <summary> C←S - Used to send most events. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Heartbeat">
            <summary> C↔S - Used to keep the connection alive and measure latency. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Identify">
            <summary> C→S - Used to associate a connection with a token and specify configuration. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.StatusUpdate">
            <summary> C→S - Used to update client's status and current game id. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.VoiceStateUpdate">
            <summary> C→S - Used to join a particular voice channel. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.VoiceServerPing">
            <summary> C→S - Used to ensure the guild's voice server is alive. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Resume">
            <summary> C→S - Used to resume a connection after a redirect occurs. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Reconnect">
            <summary> C←S - Used to notify a client that they must reconnect to another gateway. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.RequestGuildMembers">
            <summary> C→S - Used to request members that were withheld by large_threshold </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.InvalidSession">
            <summary> C←S - Used to notify the client that their session has expired and cannot be resumed. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.Hello">
            <summary> C←S - Used to provide information to the client immediately on connection. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.HeartbeatAck">
            <summary> C←S - Used to reply to a client's heartbeat. </summary>
        </member>
        <member name="F:Discord.API.Gateway.GatewayOpCode.GuildSync">
            <summary> C→S - Used to request presence updates from particular guilds. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Identify">
            <summary> C→S - Used to associate a connection with a token. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.SelectProtocol">
            <summary> C→S - Used to specify configuration. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Ready">
            <summary> C←S - Used to notify that the voice connection was successful and informs the client of available protocols. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Heartbeat">
            <summary> C→S - Used to keep the connection alive and measure latency. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.SessionDescription">
            <summary> C←S - Used to provide an encryption key to the client. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Speaking">
            <summary> C↔S - Used to inform that a certain user is speaking. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.HeartbeatAck">
            <summary> C←S - Used to reply to a client's heartbeat. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Resume">
            <summary> C→S - Used to resume a connection. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Hello">
            <summary> C←S - Used to inform the client the heartbeat interval. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.Resumed">
            <summary> C←S - Used to acknowledge a resumed connection. </summary>
        </member>
        <member name="F:Discord.API.Voice.VoiceOpCode.ClientDisconnect">
            <summary> C←S - Used to notify that a client has disconnected. </summary>
        </member>
        <member name="M:Discord.API.DiscordSocketApiClient.ConnectInternalAsync">
            <exception cref="T:System.InvalidOperationException">The client must be logged in before connecting.</exception>
            <exception cref="T:System.NotSupportedException">This client is not configured with WebSocket support.</exception>
        </member>
        <member name="M:Discord.API.DiscordSocketApiClient.DisconnectInternalAsync">
            <exception cref="T:System.NotSupportedException">This client is not configured with WebSocket support.</exception>
        </member>
        <member name="M:Discord.Audio.AudioClient.#ctor(Discord.WebSocket.SocketGuild,System.Int32,System.UInt64)">
            <summary> Creates a new REST/WebSocket discord client. </summary>
        </member>
        <member name="M:Discord.Audio.AudioClient.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Discord.Audio.Streams.BufferedWriteStream">
            <summary> Wraps another stream with a timed buffer. </summary>
        </member>
        <member name="T:Discord.Audio.Streams.InputStream">
            <summary> Reads the payload from an RTP frame </summary>
        </member>
        <member name="T:Discord.Audio.Streams.OpusDecodeStream">
            <summary> Converts Opus to PCM </summary>
        </member>
        <member name="M:Discord.Audio.Streams.OpusDecodeStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)">
            <exception cref="T:System.InvalidOperationException">Header received with no payload.</exception>
        </member>
        <member name="M:Discord.Audio.Streams.OpusDecodeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <exception cref="T:System.InvalidOperationException">Received payload without an RTP header.</exception>
        </member>
        <member name="T:Discord.Audio.Streams.OpusEncodeStream">
            <summary> Converts PCM to Opus </summary>
        </member>
        <member name="T:Discord.Audio.Streams.OutputStream">
            <summary> Wraps an IAudioClient, sending voice data on write. </summary>
        </member>
        <member name="T:Discord.Audio.Streams.RTPReadStream">
            <summary> Reads the payload from an RTP frame </summary>
        </member>
        <member name="M:Discord.Audio.Streams.RTPReadStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
            <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
        </member>
        <member name="T:Discord.Audio.Streams.RTPWriteStream">
            <summary> Wraps data in an RTP frame </summary>
        </member>
        <member name="T:Discord.Audio.Streams.SodiumDecryptStream">
            <summary>
                Decrypts an RTP frame using libsodium.
            </summary>
        </member>
        <member name="T:Discord.Audio.Streams.SodiumEncryptStream">
            <summary>
                Encrypts an RTP frame using libsodium.
            </summary>
        </member>
        <member name="M:Discord.Audio.Streams.SodiumEncryptStream.WriteHeader(System.UInt16,System.UInt32,System.Boolean)">
            <exception cref="T:System.InvalidOperationException">Header received with no payload.</exception>
        </member>
        <member name="M:Discord.Audio.Streams.SodiumEncryptStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <exception cref="T:System.InvalidOperationException">Received payload without an RTP header.</exception>
            <exception cref="T:System.OperationCanceledException">The token has had cancellation requested.</exception>
            <exception cref="T:System.ObjectDisposedException">The associated <see cref="T:System.Threading.CancellationTokenSource" /> has been disposed.</exception>
        </member>
        <member name="T:Discord.WebSocket.BaseSocketClient">
            <summary>
                Represents the base of a WebSocket-based Discord client.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.Latency">
            <summary>
                Gets the estimated round-trip latency, in milliseconds, to the gateway server.
            </summary>
            <returns>
                An <see cref="T:System.Int32"/> that represents the round-trip latency to the WebSocket server. Please
                note that this value does not represent a "true" latency for operations such as sending a message.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.Status">
            <summary>
                Gets the status for the logged-in user.
            </summary>
            <returns>
                A status object that represents the user's online presence status.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.Activity">
            <summary>
                Gets the activity for the logged-in user.
            </summary>
            <returns>
                An activity object that represents the user's current activity.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.Guilds">
            <summary>
                Gets a collection of guilds that the user is currently in.
            </summary>
            <returns>
                A read-only collection of guilds that the current user is in.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.PrivateChannels">
            <summary>
                Gets a collection of private channels opened in this session.
            </summary>
            <remarks>
                This method will retrieve all private channels (including direct-message, group channel and such) that
                are currently opened in this session.
                <note type="warning">
                    This method will not return previously opened private channels outside of the current session! If
                    you have just started the client, this may return an empty collection.
                </note>
            </remarks>
            <returns>
                A read-only collection of private channels that the user currently partakes in.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.BaseSocketClient.VoiceRegions">
            <summary>
                Gets a collection of available voice regions.
            </summary>
            <returns>
                A read-only collection of voice regions that the user has access to.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)">
            <summary>
                Gets a Discord application information for the logged-in user.
            </summary>
            <remarks>
                This method reflects your application information you submitted when creating a Discord application via
                the Developer Portal.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the application
                information.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetUser(System.UInt64)">
            <summary>
                Gets a generic user.
            </summary>
            <param name="id">The user snowflake ID.</param>
            <remarks>
                This method gets the user present in the WebSocket cache with the given condition.
                <note type="warning">
                    Sometimes a user may return <c>null</c> due to Discord not sending offline users in large guilds
                    (i.e. guild with 100+ members) actively. To download users on startup and to see more information
                    about this subject, see <see cref="P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers" />.
                </note>
                <note>
                    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.
                    users who don't share mutual guild(s) with the current user). If you wish to get a user that you do
                    not have access to, consider using the REST implementation of
                    <see cref="M:Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)" />.
                </note>
            </remarks>
            <returns>
                A generic WebSocket-based user; <c>null</c> when the user cannot be found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetUser(System.String,System.String)">
            <summary>
                Gets a user.
            </summary>
            <remarks>
                This method gets the user present in the WebSocket cache with the given condition.
                <note type="warning">
                    Sometimes a user may return <c>null</c> due to Discord not sending offline users in large guilds
                    (i.e. guild with 100+ members) actively. To download users on startup and to see more information
                    about this subject, see <see cref="P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers" />.
                </note>
                <note>
                    This method does not attempt to fetch users that the logged-in user does not have access to (i.e.
                    users who don't share mutual guild(s) with the current user). If you wish to get a user that you do
                    not have access to, consider using the REST implementation of
                    <see cref="M:Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)" />.
                </note>
            </remarks>
            <param name="username">The name of the user.</param>
            <param name="discriminator">The discriminator value of the user.</param>
            <returns>
                A generic WebSocket-based user; <c>null</c> when the user cannot be found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetChannel(System.UInt64)">
            <summary>
                Gets a channel.
            </summary>
            <param name="id">The snowflake identifier of the channel (e.g. `381889909113225237`).</param>
            <returns>
                A generic WebSocket-based channel object (voice, text, category, etc.) associated with the identifier;
                <c>null</c> when the channel cannot be found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetGuild(System.UInt64)">
            <summary>
                Gets a guild.
            </summary>
            <param name="id">The guild snowflake identifier.</param>
            <returns>
                A WebSocket-based guild associated with the snowflake identifier; <c>null</c> when the guild cannot be
                found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetVoiceRegion(System.String)">
            <summary>
                Gets a voice region.
            </summary>
            <param name="id">The identifier of the voice region (e.g. <c>eu-central</c> ).</param>
            <returns>
                A REST-based voice region associated with the identifier; <c>null</c> if the voice region is not
                found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.SetStatusAsync(Discord.UserStatus)">
            <summary>
                Sets the current status of the user (e.g. Online, Do not Disturb).
            </summary>
            <param name="status">The new status to be set.</param>
            <returns>
                A task that represents the asynchronous set operation.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)">
            <summary>
                Sets the game of the user.
            </summary>
            <param name="name">The name of the game.</param>
            <param name="streamUrl">If streaming, the URL of the stream. Must be a valid Twitch URL.</param>
            <param name="type">The type of the game.</param>
            <returns>
                A task that represents the asynchronous set operation.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.SetActivityAsync(Discord.IActivity)">
            <summary>
                Sets the <paramref name="activity"/> of the logged-in user.
            </summary>
            <remarks>
                This method sets the <paramref name="activity"/> of the user. 
                <note type="note">
                    Discord will only accept setting of name and the type of activity.
                </note>
                <note type="warning">
                    Rich Presence cannot be set via this method or client. Rich Presence is strictly limited to RPC
                    clients only. 
                </note>
            </remarks>
            <param name="activity">The activity to be set.</param>
            <returns>
                A task that represents the asynchronous set operation.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})">
            <summary>
                Attempts to download users into the user cache for the selected guilds.
            </summary>
            <param name="guilds">The guilds to download the members from.</param>
            <returns>
                A task that represents the asynchronous download operation.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <summary>
                Creates a guild for the logged-in user who is in less than 10 active guilds.
            </summary>
            <remarks>
                This method creates a new guild on behalf of the logged-in user. 
                <note type="warning">
                    Due to Discord's limitation, this method will only work for users that are in less than 10 guilds.
                </note>
            </remarks>
            <param name="name">The name of the new guild.</param>
            <param name="region">The voice region to create the guild with.</param>
            <param name="jpegIcon">The icon of the guild.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the created guild.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetConnectionsAsync(Discord.RequestOptions)">
            <summary>
                Gets the connections that the user has set up.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of connections.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.GetInviteAsync(System.String,Discord.RequestOptions)">
            <summary>
                Gets an invite.
            </summary>
            <param name="inviteId">The invitation identifier.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the invite information.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.BaseSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ChannelCreated">
            <summary> Fired when a channel is created. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been created. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.WebSocket.SocketChannel"/> as its parameter.
                </para>
                <para>
                    The newly created channel is passed into the event handler parameter. The given channel type may
                    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);
                    see the derived classes of <see cref="T:Discord.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
            <example>
                <code language="cs" region="ChannelCreated"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs"/>
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ChannelDestroyed">
            <summary> Fired when a channel is destroyed. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been destroyed. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.WebSocket.SocketChannel"/> as its parameter.
                </para>
                <para>
                    The destroyed channel is passed into the event handler parameter. The given channel type may
                    include, but not limited to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category);
                    see the derived classes of <see cref="T:Discord.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
            <example>
                <code language="cs" region="ChannelDestroyed"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs"/>
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ChannelUpdated">
            <summary> Fired when a channel is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a generic channel has been destroyed. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept 2 <see cref="T:Discord.WebSocket.SocketChannel"/> as its parameters.
                </para>
                <para>
                    The original (prior to update) channel is passed into the first <see cref="T:Discord.WebSocket.SocketChannel"/>, while
                    the updated channel is passed into the second. The given channel type may include, but not limited
                    to, Private Channels (DM, Group), Guild Channels (Text, Voice, Category); see the derived classes of
                    <see cref="T:Discord.WebSocket.SocketChannel"/> for more details.
                </para>
            </remarks>
            <example>
                <code language="cs" region="ChannelUpdated"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs"/>
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.MessageReceived">
            <summary> Fired when a message is received. </summary>
            <remarks>
                <para>
                    This event is fired when a message is received. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.WebSocket.SocketMessage"/> as its parameter.
                </para>
                <para>
                    The message that is sent to the client is passed into the event handler parameter as
                    <see cref="T:Discord.WebSocket.SocketMessage"/>. This message may be a system message (i.e.
                    <see cref="T:Discord.WebSocket.SocketSystemMessage"/>) or a user message (i.e. <see cref="T:Discord.WebSocket.SocketUserMessage"/>. See the
                    derived classes of <see cref="T:Discord.WebSocket.SocketMessage"/> for more details.
                </para>
            </remarks>
            <example>
                <para>The example below checks if the newly received message contains the target user.</para>
                <code language="cs" region="MessageReceived"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs"/>
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.MessageDeleted">
            <summary> Fired when a message is deleted. </summary>
            <remarks>
                <para>
                    This event is fired when a message is deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.Cacheable`2"/> and 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Discord.Cacheable`2.DownloadAsync"/>; the message cannot be retrieved by Discord
                        after the message has been deleted.
                    </note>
                    If caching is enabled via <see cref="T:Discord.WebSocket.DiscordSocketConfig"/>, the
                    <see cref="T:Discord.Cacheable`2"/> entity will contain the deleted message; otherwise, in event
                    that the message cannot be retrieved, the snowflake ID of the message is preserved in the 
                    <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The source channel of the removed message will be passed into the 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> parameter.
                </para>
            </remarks>
            <example>
                <code language="cs" region="MessageDeleted"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs" />
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted">
            <summary> Fired when multiple messages are bulk deleted. </summary>
            <remarks>
                <note>
                    The <see cref="E:Discord.WebSocket.BaseSocketClient.MessageDeleted"/> event will not be fired for individual messages contained in this event.
                </note>
                <para>
                    This event is fired when multiple messages are bulk deleted. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept an <see cref="!:IReadOnlyCollection&lt;Cacheable&lt;TEntity,TId&gt;&gt;"/> and 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> as its parameters.
                </para>
                <para>
                    <note type="important">
                        It is not possible to retrieve the message via
                        <see cref="M:Discord.Cacheable`2.DownloadAsync"/>; the message cannot be retrieved by Discord
                        after the message has been deleted.
                    </note>
                    If caching is enabled via <see cref="T:Discord.WebSocket.DiscordSocketConfig"/>, the
                    <see cref="T:Discord.Cacheable`2"/> entity will contain the deleted message; otherwise, in event
                    that the message cannot be retrieved, the snowflake ID of the message is preserved in the 
                    <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The source channel of the removed message will be passed into the 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.MessageUpdated">
            <summary> Fired when a message is updated. </summary>
            <remarks>
                <para>
                    This event is fired when a message is updated. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.Cacheable`2"/>, <see cref="T:Discord.WebSocket.SocketMessage"/>,
                    and <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> as its parameters.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Discord.WebSocket.DiscordSocketConfig"/>, the
                    <see cref="T:Discord.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the snowflake ID of the message is preserved in the 
                    <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The updated message will be passed into the <see cref="T:Discord.WebSocket.SocketMessage"/> parameter.
                </para>
                <para>
                    The source channel of the updated message will be passed into the 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> parameter.
                </para>
            </remarks>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ReactionAdded">
            <summary> Fired when a reaction is added to a message. </summary>
            <remarks>
                <para>
                    This event is fired when a reaction is added to a user message. The event handler must return a
                    <see cref="T:System.Threading.Tasks.Task"/> and accept a <see cref="T:Discord.Cacheable`2"/>, an 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/>, and a <see cref="T:Discord.WebSocket.SocketReaction"/> as its parameter.
                </para>
                <para>
                    If caching is enabled via <see cref="T:Discord.WebSocket.DiscordSocketConfig"/>, the
                    <see cref="T:Discord.Cacheable`2"/> entity will contain the original message; otherwise, in event
                    that the message cannot be retrieved, the snowflake ID of the message is preserved in the 
                    <see cref="T:System.UInt64"/>.
                </para>
                <para>
                    The source channel of the reaction addition will be passed into the 
                    <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> parameter.
                </para>
                <para>
                    The reaction that was added will be passed into the <see cref="T:Discord.WebSocket.SocketReaction"/> parameter.
                </para>
                <note>
                    When fetching the reaction from this event, a user may not be provided under 
                    <see cref="P:Discord.WebSocket.SocketReaction.User"/>. Please see the documentation of the property for more
                    information.
                </note>
            </remarks>
            <example>
                <code language="cs" region="ReactionAdded"
                      source="..\Discord.Net.Examples\WebSocket\BaseSocketClient.Events.Examples.cs"/>
            </example>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ReactionRemoved">
            <summary> Fired when a reaction is removed from a message. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.ReactionsCleared">
            <summary> Fired when all reactions to a message are cleared. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.RoleCreated">
            <summary> Fired when a role is created. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.RoleDeleted">
            <summary> Fired when a role is deleted. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.RoleUpdated">
            <summary> Fired when a role is updated. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.JoinedGuild">
            <summary> Fired when the connected account joins a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.LeftGuild">
            <summary> Fired when the connected account leaves a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.GuildAvailable">
            <summary> Fired when a guild becomes available. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.GuildUnavailable">
            <summary> Fired when a guild becomes unavailable. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.GuildMembersDownloaded">
            <summary> Fired when offline guild members are downloaded. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.GuildUpdated">
            <summary> Fired when a guild is updated. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserJoined">
            <summary> Fired when a user joins a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserLeft">
            <summary> Fired when a user leaves a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserBanned">
            <summary> Fired when a user is banned from a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserUnbanned">
            <summary> Fired when a user is unbanned from a guild. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserUpdated">
            <summary> Fired when a user is updated. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.GuildMemberUpdated">
            <summary> Fired when a guild member is updated, or a member presence is updated. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserVoiceStateUpdated">
            <summary> Fired when a user joins, leaves, or moves voice channels. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.VoiceServerUpdated">
            <summary> Fired when the bot connects to a Discord voice server. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.CurrentUserUpdated">
            <summary> Fired when the connected account is updated. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.UserIsTyping">
            <summary> Fired when a user starts typing. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.RecipientAdded">
            <summary> Fired when a user joins a group channel. </summary>
        </member>
        <member name="E:Discord.WebSocket.BaseSocketClient.RecipientRemoved">
            <summary> Fired when a user is removed from a group channel. </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.Latency">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.Guilds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.PrivateChannels">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordShardedClient.VoiceRegions">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.#ctor">
            <summary> Creates a new REST/WebSocket Discord client. </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.#ctor(Discord.WebSocket.DiscordSocketConfig)">
            <summary> Creates a new REST/WebSocket Discord client. </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.#ctor(System.Int32[])">
            <summary> Creates a new REST/WebSocket Discord client. </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.#ctor(System.Int32[],Discord.WebSocket.DiscordSocketConfig)">
            <summary> Creates a new REST/WebSocket Discord client. </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetGuild(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetChannel(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetUser(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.GetVoiceRegion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="guilds"/> is <see langword="null"/></exception>
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.SetStatusAsync(Discord.UserStatus)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.SetGameAsync(System.String,System.String,Discord.ActivityType)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.SetActivityAsync(Discord.IActivity)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordShardedClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="E:Discord.WebSocket.DiscordShardedClient.ShardConnected">
            <summary> Fired when a shard is connected to the Discord gateway. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordShardedClient.ShardDisconnected">
            <summary> Fired when a shard is disconnected from the Discord gateway. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordShardedClient.ShardReady">
            <summary> Fired when a guild data for a shard has finished downloading. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordShardedClient.ShardLatencyUpdated">
            <summary> Fired when a shard receives a heartbeat from the Discord gateway. </summary>
        </member>
        <member name="T:Discord.WebSocket.DiscordSocketClient">
            <summary>
                Represents a WebSocket-based Discord client.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.Rest">
            <summary> Provides access to a REST-only client with a shared state from this client. </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.ShardId">
            <summary> Gets the shard of of this client. </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.ConnectionState">
            <summary> Gets the current connection state of this client. </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.Latency">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.Guilds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.PrivateChannels">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.DMChannels">
            <summary>
                Gets a collection of direct message channels opened in this session.
            </summary>
            <remarks>
                This method returns a collection of currently opened direct message channels.
                <note type="warning">
                    This method will not return previously opened DM channels outside of the current session! If you
                    have just started the client, this may return an empty collection.
                </note>
            </remarks>
            <returns>
                A collection of DM channels that have been opened in this session.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.GroupChannels">
            <summary>
                Gets a collection of group channels opened in this session.
            </summary>
            <remarks>
                This method returns a collection of currently opened group channels.
                <note type="warning">
                    This method will not return previously opened group channels outside of the current session! If you
                    have just started the client, this may return an empty collection.
                </note>
            </remarks>
            <returns>
                A collection of group channels that have been opened in this session.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketClient.VoiceRegions">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.#ctor">
            <summary>
                Initializes a new REST/WebSocket-based Discord client.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.#ctor(Discord.WebSocket.DiscordSocketConfig)">
            <summary>
                Initializes a new REST/WebSocket-based Discord client with the provided configuration.
            </summary>
            <param name="config">The configuration to be used with the client.</param>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.OnLoginAsync(Discord.TokenType,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.OnLogoutAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.StopAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetGuild(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetChannel(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetUser(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.GetVoiceRegion(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.DownloadUsersAsync(System.Collections.Generic.IEnumerable{Discord.IGuild})">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.SetStatusAsync(Discord.UserStatus)">
            <inheritdoc />
            <example>
                The following example sets the status of the current user to Do Not Disturb.
                <code language="cs">
                await client.SetStatusAsync(UserStatus.DoNotDisturb);
                </code>
            </example>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.SetGameAsync(System.String,System.String,Discord.ActivityType)">
            <inheritdoc />
            <example>
            <para>
                The following example sets the activity of the current user to the specified game name.
                <code language="cs">
                await client.SetGameAsync("A Strange Game");
                </code>
            </para>
            <para>
                The following example sets the activity of the current user to a streaming status.
                <code language="cs">
                await client.SetGameAsync("Great Stream 10/10", "https://twitch.tv/MyAmazingStream1337", ActivityType.Streaming);
                </code>
            </para>
            </example>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.SetActivityAsync(Discord.IActivity)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.AddPrivateChannel(Discord.API.Channel,Discord.WebSocket.ClientState)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type is created.</exception>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetApplicationInfoAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetPrivateChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetDMChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetGroupChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetConnectionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetInviteAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetGuildAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetGuildsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#CreateGuildAsync(System.String,Discord.IVoiceRegion,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetUserAsync(System.String,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#GetVoiceRegionAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#StartAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketClient.Discord#IDiscordClient#StopAsync">
            <inheritdoc />
        </member>
        <member name="E:Discord.WebSocket.DiscordSocketClient.Connected">
            <summary> Fired when connected to the Discord gateway. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordSocketClient.Disconnected">
            <summary> Fired when disconnected to the Discord gateway. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordSocketClient.Ready">
            <summary> Fired when guild data has finished downloading. </summary>
        </member>
        <member name="E:Discord.WebSocket.DiscordSocketClient.LatencyUpdated">
            <summary> Fired when a heartbeat is received from the Discord gateway. </summary>
        </member>
        <member name="T:Discord.WebSocket.DiscordSocketConfig">
            <summary>
                Represents a configuration class for <see cref="T:Discord.WebSocket.DiscordSocketClient"/>.
            </summary>
            <remarks>
                This configuration, based on <see cref="T:Discord.Rest.DiscordRestConfig"/>, helps determine several key configurations the
                socket client depend on. For instance, shards and connection timeout.
            </remarks>
            <example>
                The following config enables the message cache and configures the client to always download user upon guild
                availability.
                <code language="cs">
                var config = new DiscordSocketConfig
                {
                    AlwaysDownloadUsers = true,
                    MessageCacheSize = 100
                };
                var client = new DiscordSocketClient(config);
                </code>
            </example>
        </member>
        <member name="F:Discord.WebSocket.DiscordSocketConfig.GatewayEncoding">
            <summary>
                Gets or sets the encoding gateway should use.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.GatewayHost">
            <summary>
                Gets or sets the WebSocket host to connect to. If <c>null</c>, the client will use the
                /gateway endpoint.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.ConnectionTimeout">
            <summary>
                Gets or sets the time, in milliseconds, to wait for a connection to complete before aborting.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.ShardId">
            <summary>
                Gets or sets the ID for this shard. Must be less than <see cref="P:Discord.WebSocket.DiscordSocketConfig.TotalShards"/>.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.TotalShards">
            <summary>
                Gets or sets the total number of shards for this application.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize">
            <summary>
                Gets or sets the number of messages per channel that should be kept in cache. Setting this to zero
                disables the message cache entirely.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.LargeThreshold">
            <summary>
                Gets or sets the max number of users a guild may have for offline users to be included in the READY
                packet. Max is 250.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.WebSocketProvider">
            <summary>
                Gets or sets the provider used to generate new WebSocket connections.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.UdpSocketProvider">
            <summary>
                Gets or sets the provider used to generate new UDP sockets.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers">
            <summary>
                Gets or sets whether or not all users should be downloaded as guilds come available.
            </summary>
            <remarks>
                <para>
                    By default, the Discord gateway will only send offline members if a guild has less than a certain number
                    of members (determined by <see cref="P:Discord.WebSocket.DiscordSocketConfig.LargeThreshold"/> in this library). This behaviour is why
                    sometimes a user may be missing from the WebSocket cache for collections such as 
                    <see cref="P:Discord.WebSocket.SocketGuild.Users"/>.
                </para>
                <para>
                    This property ensures that whenever a guild becomes available (determined by
                    <see cref="E:Discord.WebSocket.BaseSocketClient.GuildAvailable"/>), incomplete user chunks will be
                    downloaded to the WebSocket cache.
                </para>
                <para>
                    For more information, please see 
                    <see href="https://discordapp.com/developers/docs/topics/gateway#request-guild-members">Request Guild Members</see>
                    on the official Discord API documentation.
                </para>
                <note>
                    Please note that it can be difficult to fill the cache completely on large guilds depending on the
                    traffic. If you are using the command system, the default user TypeReader may fail to find the user
                    due to this issue. This may be resolved at v3 of the library. Until then, you may want to consider
                    overriding the TypeReader and use
                    <see cref="M:Discord.Rest.DiscordRestClient.GetUserAsync(System.UInt64,Discord.RequestOptions)"/> 
                    or <see cref="!:DiscordSocketRestClient.GetGuildUserAsync(ulong, ulong, RequestOptions)"/> as a backup.
                </note>
            </remarks>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.HandlerTimeout">
            <summary>
                Gets or sets the timeout for event handlers, in milliseconds, after which a warning will be logged. Null
                disables this check.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.DiscordSocketConfig.ExclusiveBulkDelete">
             <summary>
                 Gets or sets the behavior for <see cref="E:Discord.WebSocket.BaseSocketClient.MessageDeleted"/> on bulk deletes.
            
                 If true, the <see cref="E:Discord.WebSocket.BaseSocketClient.MessageDeleted"/> event will not be raised for bulk deletes, and
                 only the <see cref="E:Discord.WebSocket.BaseSocketClient.MessagesBulkDeleted"/> will be raised.
            
                 If false, both events will be raised.
            
                 If unset, both events will be raised, but a warning will be raised the first time a bulk delete event is received.
             </summary>
        </member>
        <member name="M:Discord.WebSocket.DiscordSocketConfig.#ctor">
            <summary>
                Initializes a default configuration.
            </summary>
        </member>
        <member name="T:Discord.WebSocket.ISocketAudioChannel">
            <summary>
                Represents a generic WebSocket-based audio channel.
            </summary>
        </member>
        <member name="T:Discord.WebSocket.ISocketMessageChannel">
            <summary>
                Represents a generic WebSocket-based channel that can send and receive messages.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.ISocketMessageChannel.CachedMessages">
            <summary>
                Gets all messages in this channel's cache.
            </summary>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <summary>
                Sends a message to this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Determines whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich"/> <see cref="T:Discord.Embed"/> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <summary>
                Sends a file to this message channel with an optional caption.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="filePath">The file path of the file.</param>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich" /> <see cref="T:Discord.Embed" /> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <param name="isSpoiler">Whether the message attachment should be hidden as a spoiler.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <summary>
                Sends a file to this message channel with an optional caption.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="!:IMessageChannel.SendFileAsync(Stream, string, string, bool, Embed, RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="stream">The <see cref="T:System.IO.Stream" /> of the file to be sent.</param>
            <param name="filename">The name of the attachment.</param>
            <param name="text">The message to be sent.</param>
            <param name="isTTS">Whether the message should be read aloud by Discord or not.</param>
            <param name="embed">The <see cref="F:Discord.EmbedType.Rich"/> <see cref="T:Discord.Embed"/> to be sent.</param>
            <param name="options">The options to be used when sending the request.</param>
            <param name="isSpoiler">Whether the message attachment should be hidden as a spoiler.</param>
            <returns>
                A task that represents an asynchronous send operation for delivering the message. The task result
                contains the sent message.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessage(System.UInt64)">
            <summary>
                Gets a cached message from this channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return <c>null</c>. Please refer to
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message from the local WebSocket cache and does not send any additional
                    request to Discord. This message may be a message that has been deleted.
                </para>
            </remarks>
            <param name="id">The snowflake identifier of the message.</param>
            <returns>
                A WebSocket-based message object; <c>null</c> if it does not exist in the cache or if caching is not
                enabled.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.Int32)">
            <summary>
                Gets the last N cached messages from this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Discord. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)">
            <summary>
                Gets the last N cached messages starting from a certain message in this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Discord. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="fromMessageId">The message ID to start the fetching from.</param>
            <param name="dir">The direction of which the message should be gotten from.</param>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)">
            <summary>
                Gets the last N cached messages starting from a certain message in this message channel.
            </summary>
            <remarks>
                <note type="warning">
                    This method requires the use of cache, which is not enabled by default; if caching is not enabled,
                    this method will always return an empty collection. Please refer to
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> for more details.
                </note>
                <para>
                    This method retrieves the message(s) from the local WebSocket cache and does not send any additional
                    request to Discord. This read-only collection may include messages that have been deleted. The
                    maximum number of messages that can be retrieved from this method depends on the
                    <see cref="P:Discord.WebSocket.DiscordSocketConfig.MessageCacheSize" /> set.
                </para>
            </remarks>
            <param name="fromMessage">The message to start the fetching from.</param>
            <param name="dir">The direction of which the message should be gotten from.</param>
            <param name="limit">The number of messages to get.</param>
            <returns>
                A read-only collection of WebSocket-based messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.ISocketMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <summary>
                Gets a read-only collection of pinned messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetPinnedMessagesAsync(Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation for retrieving pinned messages in this channel.
                The task result contains a read-only collection of messages found in the pinned messages.
            </returns>
        </member>
        <member name="T:Discord.WebSocket.ISocketPrivateChannel">
            <summary>
                Represents a generic WebSocket-based channel that is private to select recipients.
            </summary>
        </member>
        <member name="T:Discord.WebSocket.SocketCategoryChannel">
            <summary>
                Represents a WebSocket-based category channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketCategoryChannel.Users">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketCategoryChannel.Channels">
            <summary>
                Gets the child channels of this category.
            </summary>
            <returns>
                A read-only collection of <see cref="T:Discord.WebSocket.SocketGuildChannel" /> whose
                <see cref="P:Discord.INestedChannel.CategoryId" /> matches the snowflake identifier of this category
                channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketCategoryChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketCategoryChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketCategoryChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketCategoryChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketCategoryChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketChannel">
            <summary>
                Represents a WebSocket-based channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketChannel.CreatedAt">
            <summary>
                Gets when the channel is created.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketChannel.Users">
            <summary>
                Gets a collection of users from the WebSocket cache.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.SocketChannel.CreatePrivate(Discord.WebSocket.DiscordSocketClient,Discord.WebSocket.ClientState,Discord.API.Channel)">
            <exception cref="T:System.InvalidOperationException">Unexpected channel type is created.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketChannel.GetUser(System.UInt64)">
            <summary>
                Gets a generic user from this channel.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A generic WebSocket-based user associated with the snowflake identifier.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketChannelHelper.AddMessage(Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.DiscordSocketClient,Discord.WebSocket.SocketMessage)">
            <exception cref="T:System.NotSupportedException">Unexpected <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> type.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketChannelHelper.RemoveMessage(Discord.WebSocket.ISocketMessageChannel,Discord.WebSocket.DiscordSocketClient,System.UInt64)">
            <exception cref="T:System.NotSupportedException">Unexpected <see cref="T:Discord.WebSocket.ISocketMessageChannel"/> type.</exception>
        </member>
        <member name="T:Discord.WebSocket.SocketDMChannel">
            <summary>
                Represents a WebSocket-based direct-message channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Recipient">
            <summary>
                Gets the recipient of the channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.CachedMessages">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Users">
            <summary>
                Gets a collection that is the current logged-in user and the recipient.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.CloseAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetCachedMessage(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets the message associated with the given <paramref name="id"/>.
            </summary>
            <param name="id">TThe ID of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                The message gotten from either the cache or the download, or <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetCachedMessages(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetUser(System.UInt64)">
            <summary>
                Gets a user in this channel from the provided <paramref name="id"/>.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketUser"/> object that is a recipient of this channel; otherwise <c>null</c>.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.ToString">
            <summary>
                Returns the recipient user.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetUsersInternal">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.GetUserInternal(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Discord#IDMChannel#Recipient">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Discord#WebSocket#ISocketPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Discord#IPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketDMChannel.Discord#IChannel#Name">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketDMChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketGroupChannel">
            <summary>
                Represents a WebSocket-based private group channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGroupChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupChannel.CachedMessages">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.ConnectAsync">
            <exception cref="T:System.NotSupportedException">Voice is not yet supported for group channels.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetCachedMessage(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="id">The snowflake identifier of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <c>null</c> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetCachedMessages(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetUser(System.UInt64)">
            <summary>
                Gets a user from this group.
            </summary>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A WebSocket-based group user associated with the snowflake identifier.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.ToString">
            <summary>
                Returns the name of the group.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetUsersInternal">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.GetUserInternal(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupChannel.Discord#WebSocket#ISocketPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupChannel.Discord#IPrivateChannel#Recipients">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IAudioChannel#ConnectAsync(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Connecting to a group channel is not supported.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGroupChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketGuildChannel">
            <summary>
                Represents a WebSocket-based guild channel.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Guild">
            <summary>
                Gets the guild associated with this channel.
            </summary>
            <returns>
                A guild object that this channel belongs to.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.PermissionOverwrites">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Users">
            <summary>
                Gets a collection of users that are able to view the channel.
            </summary>
            <returns>
                A read-only collection of users that can access the channel (i.e. the users seen in the user list).
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Update(Discord.WebSocket.ClientState,Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.ModifyAsync(System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IUser)">
            <summary>
                Gets the permission overwrite for a specific user.
            </summary>
            <param name="user">The user to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted user; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.GetPermissionOverwrite(Discord.IRole)">
            <summary>
                Gets the permission overwrite for a specific role.
            </summary>
            <param name="role">The role to get the overwrite from.</param>
            <returns>
                An overwrite object for the targeted role; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given user.
            </summary>
            <param name="user">The user to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <summary>
                Adds or updates the permission overwrite for the given role.
            </summary>
            <param name="role">The role to add the overwrite to.</param>
            <param name="permissions">The overwrite to add to the role.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous permission operation for adding the specified permissions to the channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given user, if one exists.
            </summary>
            <param name="user">The user to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <summary>
                Removes the permission overwrite for the given role, if one exists.
            </summary>
            <param name="role">The role to remove the overwrite from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task representing the asynchronous operation for removing the specified permissions from the channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.ToString">
            <summary>
                Gets the name of the channel.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Discord.WebSocket.SocketGuildChannel.Name"/>.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.GetUsersInternal">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.GetUserInternal(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GuildId">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetPermissionOverwrite(Discord.IUser)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IRole,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#AddPermissionOverwriteAsync(Discord.IUser,Discord.OverwritePermissions,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#RemovePermissionOverwriteAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildChannel.Discord#IChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketNewsChannel">
            <summary>
                Represents a WebSocket-based news channel in a guild that has the same properties as a <see cref="!:RestTextChannel"/>.
            </summary>
        </member>
        <member name="T:Discord.WebSocket.SocketTextChannel">
            <summary>
                Represents a WebSocket-based channel in a guild that can send and receive messages.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.Topic">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.SlowModeInterval">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.Category">
            <summary>
                Gets the parent (category) of this channel in the guild's channel list.
            </summary>
            <returns>
                An <see cref="T:Discord.ICategoryChannel"/> representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.IsNsfw">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.CachedMessages">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketTextChannel.Users">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.ModifyAsync(System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetCachedMessage(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetMessageAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a message from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="id">The snowflake identifier of the message.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents an asynchronous get operation for retrieving the message. The task result contains
                the retrieved message; <c>null</c> if no message is found with the specified identifier.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the last N messages from this message channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessageId">The ID of the starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.RequestOptions)">
            <summary>
                Gets a collection of messages in this channel.
            </summary>
            <remarks>
                This method follows the same behavior as described in <see cref="M:Discord.IMessageChannel.GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)"/>.
                Please visit its documentation for more details on this method.
            </remarks>
            <param name="fromMessage">The starting message to get the messages from.</param>
            <param name="dir">The direction of the messages to be gotten from.</param>
            <param name="limit">The numbers of message to be gotten from.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                Paged collection of messages.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(System.UInt64,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetCachedMessages(Discord.IMessage,Discord.Direction,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{Discord.IMessage},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.DeleteMessagesAsync(System.Collections.Generic.IEnumerable{System.UInt64},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.DeleteMessageAsync(Discord.IMessage,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.TriggerTypingAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.EnterTypingState(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <summary>
                Creates a webhook in this text channel.
            </summary>
            <param name="name">The name of the webhook.</param>
            <param name="avatar">The avatar of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                webhook.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook available in this text channel.
            </summary>
            <param name="id">The identifier of the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a webhook associated
                with the identifier; <c>null</c> if the webhook is not found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets the webhooks available in this text channel.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks that is available in this channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#CreateWebhookAsync(System.String,System.IO.Stream,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#ITextChannel#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessageAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(System.UInt64,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetMessagesAsync(Discord.IMessage,Discord.Direction,System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#GetPinnedMessagesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendFileAsync(System.IO.Stream,System.String,System.String,System.Boolean,Discord.Embed,Discord.RequestOptions,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#IMessageChannel#SendMessageAsync(System.String,System.Boolean,Discord.Embed,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketTextChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketVoiceChannel">
            <summary>
                Represents a WebSocket-based voice channel in a guild.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceChannel.Bitrate">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceChannel.UserLimit">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceChannel.CategoryId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceChannel.Category">
            <summary>
                Gets the parent (category) channel of this channel.
            </summary>
            <returns>
                A category channel representing the parent of this channel; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.SyncPermissionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceChannel.Users">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.Update(Discord.WebSocket.ClientState,Discord.API.Channel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.ModifyAsync(System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.ConnectAsync(System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.DisconnectAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.GetUser(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.CreateInviteAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.Discord#IGuildChannel#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.Discord#IGuildChannel#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceChannel.Discord#INestedChannel#GetCategoryAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketGuild">
            <summary>
                Represents a WebSocket-based guild object.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.AFKTimeout">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.IsEmbeddable">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.VerificationLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.MfaLevel">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.DefaultMessageNotifications">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.ExplicitContentFilter">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.MemberCount">
            <summary>
                Gets the number of members.
            </summary>
            <remarks>
                This property retrieves the number of members returned by Discord.
                <note type="tip">
                <para>
                    Due to how this property is returned by Discord instead of relying on the WebSocket cache, the
                    number here is the most accurate in terms of counting the number of users within this guild.
                </para>
                <para>
                    Use this instead of enumerating the count of the
                    <see cref="P:Discord.WebSocket.SocketGuild.Users" /> collection, as you may see discrepancy
                    between that and this property.
                </para>
                </note>
            </remarks>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.DownloadedMemberCount">
            <summary> Gets the number of members downloaded to the local guild cache. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.IsConnected">
            <summary> Indicates whether the client is connected to this guild. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.ApplicationId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.OwnerId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Owner">
            <summary> Gets the user that owns this guild. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.VoiceRegionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.IconId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.SplashId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.IconUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.SplashUrl">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.HasAllMembers">
            <summary> Indicates whether the client has all the members downloaded to the local guild cache. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.IsSynced">
            <summary> Indicates whether the guild cache is synced to this guild. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.AudioClient">
            <summary>
                Gets the <see cref="T:Discord.Audio.IAudioClient" /> associated with this guild.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.DefaultChannel">
            <summary>
                Gets the default channel in this guild.
            </summary>
            <remarks>
                This property retrieves the first viewable text channel for this guild.
                <note type="warning">
                    This channel does not guarantee the user can send message to it, as it only looks for the first viewable
                    text channel.
                </note>
            </remarks>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketTextChannel"/> representing the first viewable channel that the user has access to.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.AFKChannel">
            <summary>
                Gets the AFK voice channel in this guild.
            </summary>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketVoiceChannel" /> that the AFK users will be moved to after they have idled for too
                long; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.EmbedChannel">
            <summary>
                Gets the embed channel (i.e. the channel set in the guild's widget settings) in this guild.
            </summary>
            <returns>
                A channel set within the server's widget settings; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.SystemChannel">
            <summary>
                Gets the system channel where randomized welcome messages are sent in this guild.
            </summary>
            <returns>
                A text channel where randomized welcome messages will be sent to; <c>null</c> if none is set.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.TextChannels">
            <summary>
                Gets a collection of all text channels in this guild.
            </summary>
            <returns>
                A read-only collection of message channels found within this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.VoiceChannels">
            <summary>
                Gets a collection of all voice channels in this guild.
            </summary>
            <returns>
                A read-only collection of voice channels found within this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.CategoryChannels">
            <summary>
                Gets a collection of all category channels in this guild.
            </summary>
            <returns>
                A read-only collection of category channels found within this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.CurrentUser">
            <summary>
                Gets the current logged-in user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.EveryoneRole">
            <summary>
                Gets the built-in role containing all users in this guild.
            </summary>
            <returns>
                A role object that represents an <c>@everyone</c> role in this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Channels">
            <summary>
                Gets a collection of all channels in this guild.
            </summary>
            <returns>
                A read-only collection of generic channels found within this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Emotes">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Features">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Users">
            <summary>
                Gets a collection of users in this guild.
            </summary>
            <remarks>
                This property retrieves all users found within this guild.
                <note type="warning">
                    <para>
                        This property may not always return all the members for large guilds (i.e. guilds containing
                        100+ users). If you are simply looking to get the number of users present in this guild,
                        consider using <see cref="P:Discord.WebSocket.SocketGuild.MemberCount"/> instead.
                    </para>
                    <para>
                        Otherwise, you may need to enable <see cref="P:Discord.WebSocket.DiscordSocketConfig.AlwaysDownloadUsers"/> to fetch
                        the full user list upon startup, or use <see cref="M:Discord.WebSocket.SocketGuild.DownloadUsersAsync"/> to manually download
                        the users.
                    </para>
                </note>
            </remarks>
            <returns>
                A collection of guild users found within this guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Roles">
            <summary>
                Gets a collection of all roles in this guild.
            </summary>
            <returns>
                A read-only collection of roles found within this guild.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ModifyAsync(System.Action{Discord.GuildProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ModifyEmbedAsync(System.Action{Discord.GuildEmbedProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ReorderChannelsAsync(System.Collections.Generic.IEnumerable{Discord.ReorderChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ReorderRolesAsync(System.Collections.Generic.IEnumerable{Discord.ReorderRoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.LeaveAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetBansAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all users banned in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                ban objects that this guild currently possesses, with each object containing the user banned and reason
                behind the ban.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="user">The banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a ban object for a banned user.
            </summary>
            <param name="userId">The snowflake identifier for the banned user.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a ban object, which
                contains the user information and the reason for the ban; <c>null</c> if the ban entry cannot be found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.AddBanAsync(Discord.IUser,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.AddBanAsync(System.UInt64,System.Int32,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.RemoveBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.RemoveBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetChannel(System.UInt64)">
            <summary>
                Gets a channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the channel.</param>
            <returns>
                A generic channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetTextChannel(System.UInt64)">
            <summary>
                Gets a text channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the text channel.</param>
            <returns>
                A text channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetVoiceChannel(System.UInt64)">
            <summary>
                Gets a voice channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the voice channel.</param>
            <returns>
                A voice channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetCategoryChannel(System.UInt64)">
            <summary>
                Gets a category channel in this guild.
            </summary>
            <param name="id">The snowflake identifier for the category channel.</param>
            <returns>
                A category channel associated with the specified <paramref name="id" />; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new text channel in this guild.
            </summary>
            <example>
                The following example creates a new text channel under an existing category named <c>Wumpus</c> with a set topic.
                <code language="cs">
                var categories = await guild.GetCategoriesAsync();
                var targetCategory = categories.FirstOrDefault(x => x.Name == "wumpus");
                if (targetCategory == null) return;
                await Context.Guild.CreateTextChannelAsync(name, x =>
                {
                    x.CategoryId = targetCategory.Id;
                    x.Topic = $"This channel was created at {DateTimeOffset.UtcNow} by {user}.";
                });
                </code>
            </example>
            <param name="name">The new name for the text channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                text channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new voice channel in this guild.
            </summary>
            <param name="name">The new name for the voice channel.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                voice channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.CreateCategoryChannelAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <summary>
                Creates a new channel category in this guild.
            </summary>
            <param name="name">The new name for the category.</param>
            <param name="func">The delegate containing the properties to be applied to the channel upon its creation.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                category channel.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetVoiceRegionsAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all the voice regions this guild can access.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                voice regions the guild can access.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetInvitesAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all invites in this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection of
                invite metadata, each representing information for an invite found within this guild.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetVanityInviteAsync(Discord.RequestOptions)">
            <summary>
                Gets the vanity invite URL of this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the partial metadata of
                the vanity invite found within this guild; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetRole(System.UInt64)">
            <summary>
                Gets a role in this guild.
            </summary>
            <param name="id">The snowflake identifier for the role.</param>
            <returns>
                A role that is associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <summary>
                Creates a new role with the provided name.
            </summary>
            <param name="name">The new name for the role.</param>
            <param name="permissions">The guild permission that the role should possess.</param>
            <param name="color">The color of the role.</param>
            <param name="isHoisted">Whether the role is separated from others on the sidebar.</param>
            <param name="options">The options to be used when sending the request.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <c>null</c>.</exception>
            <returns>
                A task that represents the asynchronous creation operation. The task result contains the newly created
                role.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetUser(System.UInt64)">
            <summary>
                Gets a user from this guild.
            </summary>
            <remarks>
                This method retrieves a user found within this guild.
                <note>
                    This may return <c>null</c> in the WebSocket implementation due to incomplete user collection in
                    large guilds.
                </note>
            </remarks>
            <param name="id">The snowflake identifier of the user.</param>
            <returns>
                A guild user associated with the specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.PruneUsersAsync(System.Int32,System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.DownloadUsersAsync">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetAuditLogsAsync(System.Int32,Discord.RequestOptions)">
            <summary>
                Gets the specified number of audit log entries for this guild.
            </summary>
            <param name="limit">The number of audit log entries to fetch.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of the requested audit log entries.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <summary>
                Gets a webhook found within this guild.
            </summary>
            <param name="id">The identifier for the webhook.</param>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains the webhook with the
                specified <paramref name="id"/>; <c>null</c> if none is found.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetWebhooksAsync(Discord.RequestOptions)">
            <summary>
                Gets a collection of all webhook from this guild.
            </summary>
            <param name="options">The options to be used when sending the request.</param>
            <returns>
                A task that represents the asynchronous get operation. The task result contains a read-only collection
                of webhooks found within the guild.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.GetEmoteAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.CreateEmoteAsync(System.String,Discord.Image,Discord.Optional{System.Collections.Generic.IEnumerable{Discord.IRole}},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ModifyEmoteAsync(Discord.GuildEmote,System.Action{Discord.EmoteProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.ArgumentNullException"><paramref name="func"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.DeleteEmoteAsync(Discord.GuildEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.ToString">
            <summary>
                Gets the name of the guild.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Discord.WebSocket.SocketGuild.Name"/>.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#AFKChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#AudioClient">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#Available">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#DefaultChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#EmbedChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#SystemChannelId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#EveryoneRole">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuild.Discord#IGuild#Roles">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBansAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(Discord.IUser,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetBanAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetTextChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelsAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCategoriesAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceChannelAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAFKChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetDefaultChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetEmbedChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetSystemChannelAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateTextChannelAsync(System.String,System.Action{Discord.TextChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateVoiceChannelAsync(System.String,System.Action{Discord.VoiceChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateCategoryAsync(System.String,System.Action{Discord.GuildChannelProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVoiceRegionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetIntegrationsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateIntegrationAsync(System.UInt64,System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetInvitesAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetVanityInviteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetRole(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#CreateRoleAsync(System.String,System.Nullable{Discord.GuildPermissions},System.Nullable{Discord.Color},System.Boolean,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUsersAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#AddGuildUserAsync(System.UInt64,System.String,System.Action{Discord.AddGuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetUserAsync(System.UInt64,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetCurrentUserAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetOwnerAsync(Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetAuditLogsAsync(System.Int32,Discord.CacheMode,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhookAsync(System.UInt64,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuild.Discord#IGuild#GetWebhooksAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.MessageCache.GetMany(System.Nullable{System.UInt64},Discord.Direction,System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="limit"/> is less than 0.</exception>
        </member>
        <member name="T:Discord.WebSocket.SocketMessage">
            <summary>
                Represents a WebSocket-based message.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Author">
            <summary>
                Gets the author of this message.
            </summary>
            <returns>
                A WebSocket-based user object.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Channel">
            <summary>
                Gets the source channel of the message.
            </summary>
            <returns>
                A WebSocket-based message channel.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Source">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Content">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Application">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Attachments">
            <summary>
                Returns all attachments included in this message.
            </summary>
            <returns>
                Collection of attachments.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Embeds">
            <summary>
                Returns all embeds included in this message.
            </summary>
            <returns>
                Collection of embed objects.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.MentionedChannels">
            <summary>
                Returns the channels mentioned in this message.
            </summary>
            <returns>
                Collection of WebSocket-based guild channels.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.MentionedRoles">
            <summary>
                Returns the roles mentioned in this message.
            </summary>
            <returns>
                Collection of WebSocket-based roles.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.MentionedUsers">
            <summary>
                Returns the users mentioned in this message.
            </summary>
            <returns>
                Collection of WebSocket-based users.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Timestamp">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketMessage.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketMessage.ToString">
            <summary>
                Gets the content of the message.
            </summary>
            <returns>
                Content of the message.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#Author">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#Channel">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#Type">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedChannelIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedRoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketMessage.Discord#IMessage#MentionedUserIds">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketReaction">
            <summary>
                Represents a WebSocket-based reaction object.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.UserId">
            <summary>
                Gets the ID of the user who added the reaction.
            </summary>
            <remarks>
                This property retrieves the snowflake identifier of the user responsible for this reaction. This
                property will always contain the user identifier in event that
                <see cref="P:Discord.WebSocket.SocketReaction.User" /> cannot be retrieved.
            </remarks>
            <returns>
                A user snowflake identifier associated with the user.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.User">
            <summary>
                Gets the user who added the reaction if possible.
            </summary>
            <remarks>
                <para>
                    This property attempts to retrieve a WebSocket-cached user that is responsible for this reaction from
                    the client. In other words, when the user is not in the WebSocket cache, this property may not
                    contain a value, leaving the only identifiable information to be
                    <see cref="P:Discord.WebSocket.SocketReaction.UserId" />.
                </para>
                <para>
                    If you wish to obtain an identifiable user object, consider utilizing
                    <see cref="T:Discord.Rest.DiscordRestClient" /> which will attempt to retrieve the user from REST.
                </para>
            </remarks>
            <returns>
                A user object where possible; a value is not always returned.
            </returns>
            <seealso cref="T:Discord.Optional`1"/>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.MessageId">
            <summary>
                Gets the ID of the message that has been reacted to.
            </summary>
            <returns>
                A message snowflake identifier associated with the message.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.Message">
            <summary>
                Gets the message that has been reacted to if possible.
            </summary>
            <returns>
                A WebSocket-based message where possible; a value is not always returned.
            </returns>
            <seealso cref="T:Discord.Optional`1"/>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.Channel">
            <summary>
                Gets the channel where the reaction takes place in.
            </summary>
            <returns>
                A WebSocket-based message channel.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketReaction.Emote">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketReaction.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketReaction.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketSystemMessage">
            <summary>
                Represents a WebSocket-based message sent by the system.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketSystemMessage.Type">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketUserMessage">
            <summary>
                Represents a WebSocket-based message sent by a user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.IsTTS">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.IsPinned">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.EditedTimestamp">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.Attachments">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.Embeds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.Tags">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.MentionedChannels">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.MentionedRoles">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.MentionedUsers">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUserMessage.Reactions">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.ModifyAsync(System.Action{Discord.MessageProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.InvalidOperationException">Only the author of a message may modify the message.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Message content is too long, length must be less or equal to <see cref="F:Discord.DiscordConfig.MaxMessageSize"/>.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.AddReactionAsync(Discord.IEmote,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.RemoveReactionAsync(Discord.IEmote,Discord.IUser,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.RemoveAllReactionsAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.GetReactionUsersAsync(Discord.IEmote,System.Int32,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.PinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.UnpinAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUserMessage.Resolve(Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling,Discord.TagHandling)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketRole">
            <summary>
                Represents a WebSocket-based role to be given to a guild user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Guild">
            <summary>
                Gets the guild that owns this role.
            </summary>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketGuild"/> representing the parent guild of this role.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Color">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.IsHoisted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.IsManaged">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.IsMentionable">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Name">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Permissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Position">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.IsEveryone">
            <summary>
                Returns a value that determines if the role is an @everyone role.
            </summary>
            <returns>
                <c>true</c> if the role is @everyone; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Mention">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketRole.ModifyAsync(System.Action{Discord.RoleProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketRole.DeleteAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketRole.ToString">
            <summary>
                Gets the name of the role.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Discord.WebSocket.SocketRole.Name" />.
            </returns>
        </member>
        <member name="M:Discord.WebSocket.SocketRole.CompareTo(Discord.IRole)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketRole.Discord#IRole#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketEntity`1.Id">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Channel">
            <summary>
                Gets the group channel of the user.
            </summary>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketGroupChannel" /> representing the channel of which the user belongs to.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.GlobalUser">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGroupUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketGuildUser">
            <summary>
                Represents a WebSocket-based guild user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Guild">
            <summary>
                Gets the guild the user is in.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.GuildPermissions">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.JoinedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Roles">
            <summary>
                Returns a collection of roles that the user possesses.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.VoiceChannel">
            <summary>
                Returns the voice channel the user is in, or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.VoiceState">
            <summary>
                Gets the voice connection status of the user if any.
            </summary>
            <returns>
                A <see cref="T:Discord.WebSocket.SocketVoiceState" /> representing the user's voice status; <c>null</c> if the user is not
                connected to a voice channel.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Hierarchy">
            <summary>
                Returns the position of the user within the role hierarchy.
            </summary>
            <remarks>
                The returned value equal to the position of the highest role the user has, or 
                <see cref="F:System.Int32.MaxValue"/> if user is the server owner.
            </remarks>
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketGuildUser.GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Discord#IGuildUser#GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Discord#IGuildUser#RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketGuildUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketPresence">
            <summary>
                Represents the WebSocket user's presence status. This may include their online status and their activity.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketPresence.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketPresence.Activity">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketPresence.ToString">
            <summary>
                Gets the status of the user.
            </summary>
            <returns>
                A string that resolves to <see cref="P:Discord.WebSocket.SocketPresence.Status" />.
            </returns>
        </member>
        <member name="T:Discord.WebSocket.SocketSelfUser">
            <summary>
                Represents the logged-in WebSocket-based user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.Email">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.IsVerified">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.IsMfaEnabled">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.Presence">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketSelfUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketSelfUser.ModifyAsync(System.Action{Discord.SelfUserProperties},Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketUnknownUser">
            <summary>
                Represents a WebSocket-based user that is yet to be recognized by the client.
            </summary>
            <remarks>
                A user may not be recognized due to the user missing from the cache or failed to be recognized properly.
            </remarks>
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUnknownUser.GlobalUser">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">This field is not supported for an unknown user.</exception>
        </member>
        <member name="T:Discord.WebSocket.SocketUser">
            <summary>
                Represents a WebSocket-based user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.CreatedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.Discriminator">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.Mention">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.Activity">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.Status">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketUser.MutualGuilds">
            <summary>
                Gets mutual guilds shared with this user.
            </summary>
        </member>
        <member name="M:Discord.WebSocket.SocketUser.GetOrCreateDMChannelAsync(Discord.RequestOptions)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUser.GetAvatarUrl(Discord.ImageFormat,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUser.GetDefaultAvatarUrl">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketUser.ToString">
            <summary>
                Gets the full name of the user (e.g. Example#0001).
            </summary>
            <returns>
                The full name of the user.
            </returns>
        </member>
        <member name="T:Discord.WebSocket.SocketVoiceState">
            <summary>
                Represents a WebSocket user's voice connection status.
            </summary>
        </member>
        <member name="F:Discord.WebSocket.SocketVoiceState.Default">
            <summary>
                Initializes a default <see cref="T:Discord.WebSocket.SocketVoiceState"/> with everything set to <c>null</c> or <c>false</c>.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.VoiceChannel">
            <summary>
                Gets the voice channel that the user is currently in; or <c>null</c> if none.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketVoiceState.ToString">
            <summary>
                Gets the name of this voice channel.
            </summary>
            <returns>
                A string that resolves to name of this voice channel; otherwise "Unknown".
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceState.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketWebhookUser">
            <summary>
                Represents a WebSocket-based webhook user.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Guild">
            <summary> Gets the guild of this webhook. </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.WebhookId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Username">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.DiscriminatorValue">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.AvatarId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.IsBot">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.IsWebhook">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#Guild">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#GuildId">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#RoleIds">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#JoinedAt">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#Nickname">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#GuildPermissions">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#GetPermissions(Discord.IGuildChannel)">
            <inheritdoc />
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#KickAsync(System.String,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Webhook users cannot be kicked.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#ModifyAsync(System.Action{Discord.GuildUserProperties},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Webhook users cannot be modified.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#AddRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Roles are not supported on webhook users.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#AddRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Roles are not supported on webhook users.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#RemoveRoleAsync(Discord.IRole,Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Roles are not supported on webhook users.</exception>
        </member>
        <member name="M:Discord.WebSocket.SocketWebhookUser.Discord#IGuildUser#RemoveRolesAsync(System.Collections.Generic.IEnumerable{Discord.IRole},Discord.RequestOptions)">
            <inheritdoc />
            <exception cref="T:System.NotSupportedException">Roles are not supported on webhook users.</exception>
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#IsDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#IsSelfDeafened">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#IsSelfMuted">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#IsSuppressed">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#VoiceChannel">
            <inheritdoc />
        </member>
        <member name="P:Discord.WebSocket.SocketWebhookUser.Discord#IVoiceState#VoiceSessionId">
            <inheritdoc />
        </member>
        <member name="T:Discord.WebSocket.SocketVoiceServer">
            <summary>
                Represents a WebSocket-based voice server.
            </summary>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceServer.Guild">
            <summary>
                Gets the guild associated with the voice server.
            </summary>
            <returns>
                A cached entity of the guild.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceServer.Endpoint">
            <summary>
                Gets the endpoint URL of the voice server host.
            </summary>
            <returns>
                An URL representing the voice server host.
            </returns>
        </member>
        <member name="P:Discord.WebSocket.SocketVoiceServer.Token">
            <summary>
            	Gets the voice connection token.
            </summary>
            <returns>
            	A voice connection token.
            </returns>
        </member>
        <member name="T:Discord.Commands.ShardedCommandContext">
            <summary> The sharded variant of <see cref="T:Discord.Commands.ICommandContext"/>, which may contain the client, user, guild, channel, and message. </summary>
        </member>
        <member name="P:Discord.Commands.ShardedCommandContext.Client">
            <summary> Gets the <see cref="T:Discord.WebSocket.DiscordShardedClient"/> that the command is executed with. </summary>
        </member>
        <member name="M:Discord.Commands.ShardedCommandContext.GetShardId(Discord.WebSocket.DiscordShardedClient,Discord.IGuild)">
            <summary> Gets the shard ID of the command context. </summary>
        </member>
        <member name="P:Discord.Commands.ShardedCommandContext.Discord#Commands#ICommandContext#Client">
            <inheritdoc />
        </member>
        <member name="T:Discord.Commands.SocketCommandContext">
            <summary>
                Represents a WebSocket-based context of a command. This may include the client, guild, channel, user, and message.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Client">
            <summary>
                Gets the <see cref="T:Discord.WebSocket.DiscordSocketClient" /> that the command is executed with.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Guild">
            <summary>
                Gets the <see cref="T:Discord.WebSocket.SocketGuild" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Channel">
            <summary>
                Gets the <see cref="T:Discord.WebSocket.ISocketMessageChannel" /> that the command is executed in.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.User">
            <summary>
                Gets the <see cref="T:Discord.WebSocket.SocketUser" /> who executed the command.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Message">
            <summary>
                Gets the <see cref="T:Discord.WebSocket.SocketUserMessage" /> that the command is interpreted from.
            </summary>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.IsPrivate">
            <summary>
                Indicates whether the channel that the command is executed in is a private channel.
            </summary>
        </member>
        <member name="M:Discord.Commands.SocketCommandContext.#ctor(Discord.WebSocket.DiscordSocketClient,Discord.WebSocket.SocketUserMessage)">
            <summary>
                Initializes a new <see cref="T:Discord.Commands.SocketCommandContext" /> class with the provided client and message.
            </summary>
            <param name="client">The underlying client.</param>
            <param name="msg">The underlying message.</param>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Discord#Commands#ICommandContext#Client">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Discord#Commands#ICommandContext#Guild">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Discord#Commands#ICommandContext#Channel">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Discord#Commands#ICommandContext#User">
            <inheritdoc/>
        </member>
        <member name="P:Discord.Commands.SocketCommandContext.Discord#Commands#ICommandContext#Message">
            <inheritdoc/>
        </member>
        <member name="M:Discord.Net.WebSockets.DefaultWebSocketProvider.Create(System.Net.IWebProxy)">
            <exception cref="T:System.PlatformNotSupportedException">The default WebSocketProvider is not supported on this platform.</exception>
        </member>
    </members>
</doc>
